<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:googleplay="http://www.google.com/schemas/play-podcasts/1.0" xmlns:media="http://www.rssboard.org/media-rss" version="2.0">
  <channel>
    <title><![CDATA[杰克艾米立 AI大小事[YT+]]]></title>
    <link>http://www.youtube.com/feeds/videos.xml?channel_id=UCine3_lVU-rFDRRI8xeImHA</link>
    <image>
      <url>https://yt3.googleusercontent.com/0xMEZnqzcaxKGw0rz4aO2N3v-eRR8X-SQCESGqFCTzg4RQZxqhoAm9nj1UCKPbm2oJQ0zAM=s900-b50-c-k-c0x008A95A5-no-rj</url>
      <title>杰克艾米立 AI大小事[YT+]</title>
      <link>http://www.youtube.com/feeds/videos.xml?channel_id=UCine3_lVU-rFDRRI8xeImHA</link>
    </image>
    <language>en-us</language>
    <atom:link href="https://www.youtube.com/feeds/videos.xml?channel_id=UCine3_lVU-rFDRRI8xeImHA" rel="self" type="application/rss+xml"/>
    <copyright><![CDATA[杰克艾米立 AI大小事[YT+]]]></copyright>
    <itunes:author><![CDATA[杰克艾米立 AI大小事[YT+]]]></itunes:author>
    <itunes:summary>
      <![CDATA[
      <a href="https://www.youtube.com/channel/UCine3_lVU-rFDRRI8xeImHA" target="_blank">https://www.youtube.com/channel/UCine3_lVU-rFDRRI8xeImHA</a><br />
<br />
<a href="https://www.youtube.com/feeds/videos.xml?channel_id=UCine3_lVU-rFDRRI8xeImHA" target="_blank">https://www.youtube.com/feeds/videos.xml?channel_id=UCine3_lVU-rFDRRI8xeImHA</a>
      ]]>
    </itunes:summary>
    <description>
      <![CDATA[
      <a href="https://www.youtube.com/channel/UCine3_lVU-rFDRRI8xeImHA" target="_blank">https://www.youtube.com/channel/UCine3_lVU-rFDRRI8xeImHA</a><br />
<br />
<a href="https://www.youtube.com/feeds/videos.xml?channel_id=UCine3_lVU-rFDRRI8xeImHA" target="_blank">https://www.youtube.com/feeds/videos.xml?channel_id=UCine3_lVU-rFDRRI8xeImHA</a>
      ]]>
    </description>
    <itunes:owner>
      <itunes:name><![CDATA[杰克艾米立 AI大小事[YT+]]]></itunes:name>
    </itunes:owner>
    <itunes:image href="https://yt3.googleusercontent.com/0xMEZnqzcaxKGw0rz4aO2N3v-eRR8X-SQCESGqFCTzg4RQZxqhoAm9nj1UCKPbm2oJQ0zAM=s900-b50-c-k-c0x008A95A5-no-rj"/>
<item>
      <title><![CDATA[#3 ComfyUI入門三部曲-基礎操作篇]]></title>
      <link>https://www.youtube.com/watch?v=0-x2-Ow_a7s</link>
      <itunes:title><![CDATA[#3 ComfyUI入門三部曲-基礎操作篇]]></itunes:title>
      <itunes:author><![CDATA[杰克艾米立]]></itunes:author>
      <itunes:summary>
        <![CDATA[<hr style="clear:both" />

<p><img src="https://img.youtube.com/vi/0-x2-Ow_a7s/maxresdefault.jpg" /></p><h1>值得閱讀的理由</h1><ul><li>學習 ComfyUI 的基本操作，包含常用快速鍵及界面功能。</li><li>了解如何在 ComfyUI 中建立和操作群組、固定節點及使用節點地圖。</li><li>深入理解文生圖與圖生圖工作流程中的關鍵參數設定，如 CFG 和降噪強度。</li><li>掌握在 ComfyUI 中載入模型、圖片以及尋找自訂節點的方法，並了解相關的疑難排解技巧。</li></ul><hr /><h1>摘要</h1><h2>基本操作與介面功能</h2><p>影片開頭，杰克首先補充了 ComfyUI 介面的快速**中英切換**功能，對於習慣英文介面的使用者非常方便。接著，他引導使用者前往 **Manager**，強調可以在其中找到許多**工作流程 (workflows)** 的網站資源，方便使用者學習和運用。Manager 頁面清楚地列出了各類工作流程的來源，讓使用者能輕鬆探索不同的生成方式。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_38.jpg" /></p></p><h2>實用快速鍵與節點管理</h2><p>杰克接著分享了 ComfyUI 中實用的**快速鍵**。他示範如何使用 **Ctrl + 滑鼠拖曳**來框選多個節點，並透過 **Shift + 滑鼠左鍵**來移動整組選取的視窗。他強調 **Ctrl + C / Ctrl + V** 可以方便地複製貼上整組節點，甚至可以在不同的 ComfyUI 網頁分頁間進行複製貼上。此外，他還介紹了使用 **Ctrl + G** 建立**節點群組**的好處，讓使用者能將相關節點整齊地歸類與拖動，大幅提高工作流程的組織性。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_146.jpg" /></p></p><h2>節點地圖與繞過節點</h2><p>杰克說明了**節點地圖 (Node Map)** 功能，它提供了整個工作流程的總覽，使用者可以在其中看到所有使用的節點。節點地圖也提供了**眼睛圖標**，可以快速地**繞過 (bypass)** 特定節點，讓模型在生成過程中跳過該節點的處理步驟，這對於測試不同節點的效果非常有用。他提到除了點擊圖標，也可以透過**框選節點後按 Ctrl + B** 來快速執行繞過操作。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_261.jpg" /></p></p><h2>固定節點與重新命名</h2><p>為了防止工作流程中的節點被意外移動，杰克介紹了**大頭針 (Pin)** 功能，透過**右鍵選單**或**快速鍵 P** 可以固定節點。他特別指出，被固定的節點無法再被複製，這也是避免誤操作的一種方式。此外，他簡要提到了可以**雙擊**節點或群組的文字部分來**重新命名**，但他建議不要隨意重新命名單個節點，以免在日後尋找時造成混亂。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_402.jpg" /></p></p><h2>介面設定與連接線風格</h2><p>杰克提及 ComfyUI 介面左下角的**齒輪圖標**包含許多**小工具**和設定選項。他特別深入介紹了**連接線條的風格**，使用者可以選擇曲線、直角線、直線或隱藏線。他展示了不同風格的視覺效果，並解釋了各自的優缺點。雖然直角線看起來更整齊，但他最終推薦習慣使用**曲線**，因為在複雜的工作流程中，曲線能更清楚地追蹤節點間的連接路徑，即使有時視覺上稍顯雜亂。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_497.jpg" /></p></p><h2>工作流程範例：文生圖 (T2I)</h2><p>接下來，杰克開始介紹不同的**工作流程**。他展示了最基本的**文生圖 (Text-to-Image, T2I)** 流程，包含載入模型、CLIP 文字編碼器、VAE 解碼器和採樣器等節點。他接著與 **Flux 的 T2I 工作流程**進行比較，指出 Flux 流程中的一個關鍵特性在於其 CFG 的處理方式。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_510.jpg" /></p></p><h2>理解 CFG 參數</h2><p>杰克重點解釋了 **CFG (Classifier Free Guidance)** 參數在模型生成中的作用，它可以理解為文本引導的強度。他透過實驗演示：當 **CFG 設定為 0** 時，無論提示詞是什麼，生成的圖片都是一樣的，因為模型完全忽略了提示詞。他說明了 Flux 工作流程中預設的 CFG 相當於 1，這意味著模型只會參考**正面提示詞**，忽略反向提示詞。他解釋了較高的 CFG 值會使模型更遵循提示詞，但也可能導致不自然或不穩定的效果。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_684.jpg" /></p></p><h2>工作流程範例：圖生圖 (I2I)</h2><p>然後，杰克轉向介紹**圖生圖 (Image-to-Image, I2I)** 流程。他演示了如何使用 **`Load Image` 節點**載入圖片。他解釋說，由於模型在**潛空間 (latent space)** 工作，像素圖片需要透過 **VAE Encode 節點**轉換為潛空間表示。他展示了連接這些節點以構成基本的圖生圖工作流程。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_1093.jpg" /></p></p><h2>圖生圖的降噪 (Denoise) 參數</h2><p>杰克接著說明了 I2I 中關鍵的**降噪 (Denoise)** 參數：值為 1.0 意味著完全基於提示詞重新生成圖片（類似從潛空間進行文生圖），這對應於 WebUI 中的重繪幅度 1.0。較低的值會保留更多原始圖片的特徵。他透過實驗演示了設定降噪為 0.7 的效果，圖片會與原圖相似但有風格轉換。他強調在**文生圖**流程中，降噪強度**一律應設為 1.0**，否則會出現奇怪的結果。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_1123.jpg" /></p></p><h2>`Resize Image` 節點與 SDXL 尺寸</h2><p>杰克介紹了 **`Resize Image` 節點**，特別是它對 **SDXL** 等模型的重要性。他解釋說，SDXL 對輸入圖片的**尺寸和長寬比**有特定的最佳範圍（通常一邊固定為 1024），為了避免生成圖片出現裁切或變形，需要使用此節點來**重新縮放**原始圖片。他演示了如何設定**固定尺寸 (constrain_size)** 和**精度 (precision)** 來將圖片調整到 SDXL 建議的長寬比，例如 896x1152 或 1152x896。他提到雖然 ComfyUI 內建節點可以進行縮放，但最符合 SDXL 標準尺寸的調整可能需要使用**自訂節點**來自動處理。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_1396.jpg" /></p></p><h2>節點連接規則與側邊面板 (Node List)</h2><p>杰克還提到，ComfyUI 中的**節點**具有**固定的輸入/輸出類型和方向**（左邊為輸入，右邊為輸出），不同類型的資料（如潛空間圖片和文字引導）通常不能直接連接。他警告不要使用某些特殊的**轉向節點**，因為它們會讓工作流程變得混亂難懂，建議使用者遵循自然的連接方向。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_1190.jpg" /></p></p><p>隨後，杰克大力推薦使用介面左側的**節點列表 (Node List)**，這個**側邊面板**極大地提高了尋找和載入節點的效率。他說明了如何透過**瀏覽資料夾**或**搜尋**來快速找到所需的節點，並且將**滑鼠懸停**在節點名稱上就可以**預覽**其功能和連接點，這比以往右鍵選單的方式便捷許多。他演示了如何從側邊面板將節點**直接拖曳**到工作區中使用，也示範了直接**拖曳連接線**到節點上自動連接的功能。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_1281.jpg" /></p></p><h2>自訂節點的安裝與疑難排解</h2><p>杰克最後著重說明了**自訂節點**的安裝與**疑難排解**。他指導使用者透過 **Manager** 中的「**Install Custom Nodes**」功能尋找和安裝其他開發者製作的節點，並建議可以搜尋「Jack」來找到他自己編寫的節點（用於 SDXL 的尺寸調整）。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_1456.jpg" /></p></p><p>他強調，安裝自訂節點時**務必注意相依性問題**。建議使用者查看節點的 GitHub 頁面，了解其所需的**函式庫 (libraries)** 和版本要求。**版本不相容**是 ComfyUI 出現問題的常見原因，可能會導致程式無法啟動。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_1501.jpg" /></p></p><p>杰克提供了排解問題的建議：首先查看**命令提示字元**中的錯誤訊息；如果無法判斷，最終手段是**刪除 ComfyUI 資料夾中的 `python_embeded` 資料夾**，讓啟動腳本重新安裝基礎環境。接著，在 Manager 中找到自訂節點列表，使用「**Try to Fix**」功能來嘗試自動安裝缺失的套件相依性。他提醒使用者，過度安裝**來源不明**或**版本要求嚴格**的自訂節點會增加系統不穩定性，建議只安裝確實需要的節點，並在安裝前**備份**整個 ComfyUI 資料夾或至少 `python_embeded` 資料夾，以防萬一。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_1586.jpg" /></p></p><hr />

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=0-x2-Ow_a7s">https://www.youtube.com/watch?v=0-x2-Ow_a7s</a></p><p>加入Discord: <a href="https://discord.gg/TM5d89YNwA">https://discord.gg/TM5d89YNwA</a> </p><p>FB粉專: <a href="https://www.facebook.com/profile.php?id=100090228987264">https://www.facebook.com/profile.php?id=100090228987264</a> </p><p>成為這個頻道的會員並獲得福利： <a href="https://www.youtube.com/channel/UCine3_lVU-rFDRRI8xeImHA/join">https://www.youtube.com/channel/UCine3_lVU-rFDRRI8xeImHA/join</a> </p><p>抖內JackEllie(本功能沒有任何福利，但謝謝你的錢): <a href="https://www.buymeacoffee.com/otakuya202y">https://www.buymeacoffee.com/otakuya202y</a> ===================================================================== </p><p>本篇為ComfyUI入門三部曲的第三部基礎操作篇，延續第二篇的內容基本上是杰克的一段教學精華，看完這篇相信你可以更好的理解ComfyUI基礎操作功能。</p><p></p><p>基本的工作流下載:</p><p><a href="https://github.com/JackEllie/ComfyWorkflow/tree/main/Basic%20workflow">https://github.com/JackEllie/ComfyWorkflow/tree/main/Basic%20workflow</a></p><p></p><p>第一篇</p><p><a href="https://youtu.be/7WZCvVrw7To">https://youtu.be/7WZCvVrw7To</a></p><p></p><p>第二篇</p><p><a href="https://youtu.be/g0xYOVybAVc">https://youtu.be/g0xYOVybAVc</a></p><p></p><p>#stablediffusion #aidrawing #ai繪圖 #aiart #aigc #安裝教學 #comfyui #workflow</p>]]>
      </itunes:summary>
      <description>
        <![CDATA[<hr style="clear:both" />

<p><img src="https://img.youtube.com/vi/0-x2-Ow_a7s/maxresdefault.jpg" /></p><h1>值得閱讀的理由</h1><ul><li>學習 ComfyUI 的基本操作，包含常用快速鍵及界面功能。</li><li>了解如何在 ComfyUI 中建立和操作群組、固定節點及使用節點地圖。</li><li>深入理解文生圖與圖生圖工作流程中的關鍵參數設定，如 CFG 和降噪強度。</li><li>掌握在 ComfyUI 中載入模型、圖片以及尋找自訂節點的方法，並了解相關的疑難排解技巧。</li></ul><hr /><h1>摘要</h1><h2>基本操作與介面功能</h2><p>影片開頭，杰克首先補充了 ComfyUI 介面的快速**中英切換**功能，對於習慣英文介面的使用者非常方便。接著，他引導使用者前往 **Manager**，強調可以在其中找到許多**工作流程 (workflows)** 的網站資源，方便使用者學習和運用。Manager 頁面清楚地列出了各類工作流程的來源，讓使用者能輕鬆探索不同的生成方式。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_38.jpg" /></p></p><h2>實用快速鍵與節點管理</h2><p>杰克接著分享了 ComfyUI 中實用的**快速鍵**。他示範如何使用 **Ctrl + 滑鼠拖曳**來框選多個節點，並透過 **Shift + 滑鼠左鍵**來移動整組選取的視窗。他強調 **Ctrl + C / Ctrl + V** 可以方便地複製貼上整組節點，甚至可以在不同的 ComfyUI 網頁分頁間進行複製貼上。此外，他還介紹了使用 **Ctrl + G** 建立**節點群組**的好處，讓使用者能將相關節點整齊地歸類與拖動，大幅提高工作流程的組織性。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_146.jpg" /></p></p><h2>節點地圖與繞過節點</h2><p>杰克說明了**節點地圖 (Node Map)** 功能，它提供了整個工作流程的總覽，使用者可以在其中看到所有使用的節點。節點地圖也提供了**眼睛圖標**，可以快速地**繞過 (bypass)** 特定節點，讓模型在生成過程中跳過該節點的處理步驟，這對於測試不同節點的效果非常有用。他提到除了點擊圖標，也可以透過**框選節點後按 Ctrl + B** 來快速執行繞過操作。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_261.jpg" /></p></p><h2>固定節點與重新命名</h2><p>為了防止工作流程中的節點被意外移動，杰克介紹了**大頭針 (Pin)** 功能，透過**右鍵選單**或**快速鍵 P** 可以固定節點。他特別指出，被固定的節點無法再被複製，這也是避免誤操作的一種方式。此外，他簡要提到了可以**雙擊**節點或群組的文字部分來**重新命名**，但他建議不要隨意重新命名單個節點，以免在日後尋找時造成混亂。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_402.jpg" /></p></p><h2>介面設定與連接線風格</h2><p>杰克提及 ComfyUI 介面左下角的**齒輪圖標**包含許多**小工具**和設定選項。他特別深入介紹了**連接線條的風格**，使用者可以選擇曲線、直角線、直線或隱藏線。他展示了不同風格的視覺效果，並解釋了各自的優缺點。雖然直角線看起來更整齊，但他最終推薦習慣使用**曲線**，因為在複雜的工作流程中，曲線能更清楚地追蹤節點間的連接路徑，即使有時視覺上稍顯雜亂。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_497.jpg" /></p></p><h2>工作流程範例：文生圖 (T2I)</h2><p>接下來，杰克開始介紹不同的**工作流程**。他展示了最基本的**文生圖 (Text-to-Image, T2I)** 流程，包含載入模型、CLIP 文字編碼器、VAE 解碼器和採樣器等節點。他接著與 **Flux 的 T2I 工作流程**進行比較，指出 Flux 流程中的一個關鍵特性在於其 CFG 的處理方式。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_510.jpg" /></p></p><h2>理解 CFG 參數</h2><p>杰克重點解釋了 **CFG (Classifier Free Guidance)** 參數在模型生成中的作用，它可以理解為文本引導的強度。他透過實驗演示：當 **CFG 設定為 0** 時，無論提示詞是什麼，生成的圖片都是一樣的，因為模型完全忽略了提示詞。他說明了 Flux 工作流程中預設的 CFG 相當於 1，這意味著模型只會參考**正面提示詞**，忽略反向提示詞。他解釋了較高的 CFG 值會使模型更遵循提示詞，但也可能導致不自然或不穩定的效果。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_684.jpg" /></p></p><h2>工作流程範例：圖生圖 (I2I)</h2><p>然後，杰克轉向介紹**圖生圖 (Image-to-Image, I2I)** 流程。他演示了如何使用 **`Load Image` 節點**載入圖片。他解釋說，由於模型在**潛空間 (latent space)** 工作，像素圖片需要透過 **VAE Encode 節點**轉換為潛空間表示。他展示了連接這些節點以構成基本的圖生圖工作流程。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_1093.jpg" /></p></p><h2>圖生圖的降噪 (Denoise) 參數</h2><p>杰克接著說明了 I2I 中關鍵的**降噪 (Denoise)** 參數：值為 1.0 意味著完全基於提示詞重新生成圖片（類似從潛空間進行文生圖），這對應於 WebUI 中的重繪幅度 1.0。較低的值會保留更多原始圖片的特徵。他透過實驗演示了設定降噪為 0.7 的效果，圖片會與原圖相似但有風格轉換。他強調在**文生圖**流程中，降噪強度**一律應設為 1.0**，否則會出現奇怪的結果。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_1123.jpg" /></p></p><h2>`Resize Image` 節點與 SDXL 尺寸</h2><p>杰克介紹了 **`Resize Image` 節點**，特別是它對 **SDXL** 等模型的重要性。他解釋說，SDXL 對輸入圖片的**尺寸和長寬比**有特定的最佳範圍（通常一邊固定為 1024），為了避免生成圖片出現裁切或變形，需要使用此節點來**重新縮放**原始圖片。他演示了如何設定**固定尺寸 (constrain_size)** 和**精度 (precision)** 來將圖片調整到 SDXL 建議的長寬比，例如 896x1152 或 1152x896。他提到雖然 ComfyUI 內建節點可以進行縮放，但最符合 SDXL 標準尺寸的調整可能需要使用**自訂節點**來自動處理。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_1396.jpg" /></p></p><h2>節點連接規則與側邊面板 (Node List)</h2><p>杰克還提到，ComfyUI 中的**節點**具有**固定的輸入/輸出類型和方向**（左邊為輸入，右邊為輸出），不同類型的資料（如潛空間圖片和文字引導）通常不能直接連接。他警告不要使用某些特殊的**轉向節點**，因為它們會讓工作流程變得混亂難懂，建議使用者遵循自然的連接方向。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_1190.jpg" /></p></p><p>隨後，杰克大力推薦使用介面左側的**節點列表 (Node List)**，這個**側邊面板**極大地提高了尋找和載入節點的效率。他說明了如何透過**瀏覽資料夾**或**搜尋**來快速找到所需的節點，並且將**滑鼠懸停**在節點名稱上就可以**預覽**其功能和連接點，這比以往右鍵選單的方式便捷許多。他演示了如何從側邊面板將節點**直接拖曳**到工作區中使用，也示範了直接**拖曳連接線**到節點上自動連接的功能。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_1281.jpg" /></p></p><h2>自訂節點的安裝與疑難排解</h2><p>杰克最後著重說明了**自訂節點**的安裝與**疑難排解**。他指導使用者透過 **Manager** 中的「**Install Custom Nodes**」功能尋找和安裝其他開發者製作的節點，並建議可以搜尋「Jack」來找到他自己編寫的節點（用於 SDXL 的尺寸調整）。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_1456.jpg" /></p></p><p>他強調，安裝自訂節點時**務必注意相依性問題**。建議使用者查看節點的 GitHub 頁面，了解其所需的**函式庫 (libraries)** 和版本要求。**版本不相容**是 ComfyUI 出現問題的常見原因，可能會導致程式無法啟動。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_1501.jpg" /></p></p><p>杰克提供了排解問題的建議：首先查看**命令提示字元**中的錯誤訊息；如果無法判斷，最終手段是**刪除 ComfyUI 資料夾中的 `python_embeded` 資料夾**，讓啟動腳本重新安裝基礎環境。接著，在 Manager 中找到自訂節點列表，使用「**Try to Fix**」功能來嘗試自動安裝缺失的套件相依性。他提醒使用者，過度安裝**來源不明**或**版本要求嚴格**的自訂節點會增加系統不穩定性，建議只安裝確實需要的節點，並在安裝前**備份**整個 ComfyUI 資料夾或至少 `python_embeded` 資料夾，以防萬一。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_1586.jpg" /></p></p><hr />

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=0-x2-Ow_a7s">https://www.youtube.com/watch?v=0-x2-Ow_a7s</a></p><p>加入Discord: <a href="https://discord.gg/TM5d89YNwA">https://discord.gg/TM5d89YNwA</a> </p><p>FB粉專: <a href="https://www.facebook.com/profile.php?id=100090228987264">https://www.facebook.com/profile.php?id=100090228987264</a> </p><p>成為這個頻道的會員並獲得福利： <a href="https://www.youtube.com/channel/UCine3_lVU-rFDRRI8xeImHA/join">https://www.youtube.com/channel/UCine3_lVU-rFDRRI8xeImHA/join</a> </p><p>抖內JackEllie(本功能沒有任何福利，但謝謝你的錢): <a href="https://www.buymeacoffee.com/otakuya202y">https://www.buymeacoffee.com/otakuya202y</a> ===================================================================== </p><p>本篇為ComfyUI入門三部曲的第三部基礎操作篇，延續第二篇的內容基本上是杰克的一段教學精華，看完這篇相信你可以更好的理解ComfyUI基礎操作功能。</p><p></p><p>基本的工作流下載:</p><p><a href="https://github.com/JackEllie/ComfyWorkflow/tree/main/Basic%20workflow">https://github.com/JackEllie/ComfyWorkflow/tree/main/Basic%20workflow</a></p><p></p><p>第一篇</p><p><a href="https://youtu.be/7WZCvVrw7To">https://youtu.be/7WZCvVrw7To</a></p><p></p><p>第二篇</p><p><a href="https://youtu.be/g0xYOVybAVc">https://youtu.be/g0xYOVybAVc</a></p><p></p><p>#stablediffusion #aidrawing #ai繪圖 #aiart #aigc #安裝教學 #comfyui #workflow</p>]]>
      </description>
      <content:encoded><![CDATA[<hr style="clear:both" />

<p><img src="https://img.youtube.com/vi/0-x2-Ow_a7s/maxresdefault.jpg" /></p><h1>值得閱讀的理由</h1><ul><li>學習 ComfyUI 的基本操作，包含常用快速鍵及界面功能。</li><li>了解如何在 ComfyUI 中建立和操作群組、固定節點及使用節點地圖。</li><li>深入理解文生圖與圖生圖工作流程中的關鍵參數設定，如 CFG 和降噪強度。</li><li>掌握在 ComfyUI 中載入模型、圖片以及尋找自訂節點的方法，並了解相關的疑難排解技巧。</li></ul><hr /><h1>摘要</h1><h2>基本操作與介面功能</h2><p>影片開頭，杰克首先補充了 ComfyUI 介面的快速**中英切換**功能，對於習慣英文介面的使用者非常方便。接著，他引導使用者前往 **Manager**，強調可以在其中找到許多**工作流程 (workflows)** 的網站資源，方便使用者學習和運用。Manager 頁面清楚地列出了各類工作流程的來源，讓使用者能輕鬆探索不同的生成方式。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_38.jpg" /></p></p><h2>實用快速鍵與節點管理</h2><p>杰克接著分享了 ComfyUI 中實用的**快速鍵**。他示範如何使用 **Ctrl + 滑鼠拖曳**來框選多個節點，並透過 **Shift + 滑鼠左鍵**來移動整組選取的視窗。他強調 **Ctrl + C / Ctrl + V** 可以方便地複製貼上整組節點，甚至可以在不同的 ComfyUI 網頁分頁間進行複製貼上。此外，他還介紹了使用 **Ctrl + G** 建立**節點群組**的好處，讓使用者能將相關節點整齊地歸類與拖動，大幅提高工作流程的組織性。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_146.jpg" /></p></p><h2>節點地圖與繞過節點</h2><p>杰克說明了**節點地圖 (Node Map)** 功能，它提供了整個工作流程的總覽，使用者可以在其中看到所有使用的節點。節點地圖也提供了**眼睛圖標**，可以快速地**繞過 (bypass)** 特定節點，讓模型在生成過程中跳過該節點的處理步驟，這對於測試不同節點的效果非常有用。他提到除了點擊圖標，也可以透過**框選節點後按 Ctrl + B** 來快速執行繞過操作。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_261.jpg" /></p></p><h2>固定節點與重新命名</h2><p>為了防止工作流程中的節點被意外移動，杰克介紹了**大頭針 (Pin)** 功能，透過**右鍵選單**或**快速鍵 P** 可以固定節點。他特別指出，被固定的節點無法再被複製，這也是避免誤操作的一種方式。此外，他簡要提到了可以**雙擊**節點或群組的文字部分來**重新命名**，但他建議不要隨意重新命名單個節點，以免在日後尋找時造成混亂。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_402.jpg" /></p></p><h2>介面設定與連接線風格</h2><p>杰克提及 ComfyUI 介面左下角的**齒輪圖標**包含許多**小工具**和設定選項。他特別深入介紹了**連接線條的風格**，使用者可以選擇曲線、直角線、直線或隱藏線。他展示了不同風格的視覺效果，並解釋了各自的優缺點。雖然直角線看起來更整齊，但他最終推薦習慣使用**曲線**，因為在複雜的工作流程中，曲線能更清楚地追蹤節點間的連接路徑，即使有時視覺上稍顯雜亂。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_497.jpg" /></p></p><h2>工作流程範例：文生圖 (T2I)</h2><p>接下來，杰克開始介紹不同的**工作流程**。他展示了最基本的**文生圖 (Text-to-Image, T2I)** 流程，包含載入模型、CLIP 文字編碼器、VAE 解碼器和採樣器等節點。他接著與 **Flux 的 T2I 工作流程**進行比較，指出 Flux 流程中的一個關鍵特性在於其 CFG 的處理方式。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_510.jpg" /></p></p><h2>理解 CFG 參數</h2><p>杰克重點解釋了 **CFG (Classifier Free Guidance)** 參數在模型生成中的作用，它可以理解為文本引導的強度。他透過實驗演示：當 **CFG 設定為 0** 時，無論提示詞是什麼，生成的圖片都是一樣的，因為模型完全忽略了提示詞。他說明了 Flux 工作流程中預設的 CFG 相當於 1，這意味著模型只會參考**正面提示詞**，忽略反向提示詞。他解釋了較高的 CFG 值會使模型更遵循提示詞，但也可能導致不自然或不穩定的效果。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_684.jpg" /></p></p><h2>工作流程範例：圖生圖 (I2I)</h2><p>然後，杰克轉向介紹**圖生圖 (Image-to-Image, I2I)** 流程。他演示了如何使用 **`Load Image` 節點**載入圖片。他解釋說，由於模型在**潛空間 (latent space)** 工作，像素圖片需要透過 **VAE Encode 節點**轉換為潛空間表示。他展示了連接這些節點以構成基本的圖生圖工作流程。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_1093.jpg" /></p></p><h2>圖生圖的降噪 (Denoise) 參數</h2><p>杰克接著說明了 I2I 中關鍵的**降噪 (Denoise)** 參數：值為 1.0 意味著完全基於提示詞重新生成圖片（類似從潛空間進行文生圖），這對應於 WebUI 中的重繪幅度 1.0。較低的值會保留更多原始圖片的特徵。他透過實驗演示了設定降噪為 0.7 的效果，圖片會與原圖相似但有風格轉換。他強調在**文生圖**流程中，降噪強度**一律應設為 1.0**，否則會出現奇怪的結果。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_1123.jpg" /></p></p><h2>`Resize Image` 節點與 SDXL 尺寸</h2><p>杰克介紹了 **`Resize Image` 節點**，特別是它對 **SDXL** 等模型的重要性。他解釋說，SDXL 對輸入圖片的**尺寸和長寬比**有特定的最佳範圍（通常一邊固定為 1024），為了避免生成圖片出現裁切或變形，需要使用此節點來**重新縮放**原始圖片。他演示了如何設定**固定尺寸 (constrain_size)** 和**精度 (precision)** 來將圖片調整到 SDXL 建議的長寬比，例如 896x1152 或 1152x896。他提到雖然 ComfyUI 內建節點可以進行縮放，但最符合 SDXL 標準尺寸的調整可能需要使用**自訂節點**來自動處理。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_1396.jpg" /></p></p><h2>節點連接規則與側邊面板 (Node List)</h2><p>杰克還提到，ComfyUI 中的**節點**具有**固定的輸入/輸出類型和方向**（左邊為輸入，右邊為輸出），不同類型的資料（如潛空間圖片和文字引導）通常不能直接連接。他警告不要使用某些特殊的**轉向節點**，因為它們會讓工作流程變得混亂難懂，建議使用者遵循自然的連接方向。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_1190.jpg" /></p></p><p>隨後，杰克大力推薦使用介面左側的**節點列表 (Node List)**，這個**側邊面板**極大地提高了尋找和載入節點的效率。他說明了如何透過**瀏覽資料夾**或**搜尋**來快速找到所需的節點，並且將**滑鼠懸停**在節點名稱上就可以**預覽**其功能和連接點，這比以往右鍵選單的方式便捷許多。他演示了如何從側邊面板將節點**直接拖曳**到工作區中使用，也示範了直接**拖曳連接線**到節點上自動連接的功能。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_1281.jpg" /></p></p><h2>自訂節點的安裝與疑難排解</h2><p>杰克最後著重說明了**自訂節點**的安裝與**疑難排解**。他指導使用者透過 **Manager** 中的「**Install Custom Nodes**」功能尋找和安裝其他開發者製作的節點，並建議可以搜尋「Jack」來找到他自己編寫的節點（用於 SDXL 的尺寸調整）。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_1456.jpg" /></p></p><p>他強調，安裝自訂節點時**務必注意相依性問題**。建議使用者查看節點的 GitHub 頁面，了解其所需的**函式庫 (libraries)** 和版本要求。**版本不相容**是 ComfyUI 出現問題的常見原因，可能會導致程式無法啟動。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_1501.jpg" /></p></p><p>杰克提供了排解問題的建議：首先查看**命令提示字元**中的錯誤訊息；如果無法判斷，最終手段是**刪除 ComfyUI 資料夾中的 `python_embeded` 資料夾**，讓啟動腳本重新安裝基礎環境。接著，在 Manager 中找到自訂節點列表，使用「**Try to Fix**」功能來嘗試自動安裝缺失的套件相依性。他提醒使用者，過度安裝**來源不明**或**版本要求嚴格**的自訂節點會增加系統不穩定性，建議只安裝確實需要的節點，並在安裝前**備份**整個 ComfyUI 資料夾或至少 `python_embeded` 資料夾，以防萬一。 <p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/0-x2-Ow_a7s_1586.jpg" /></p></p><hr />

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=0-x2-Ow_a7s">https://www.youtube.com/watch?v=0-x2-Ow_a7s</a></p><p>加入Discord: <a href="https://discord.gg/TM5d89YNwA">https://discord.gg/TM5d89YNwA</a> </p><p>FB粉專: <a href="https://www.facebook.com/profile.php?id=100090228987264">https://www.facebook.com/profile.php?id=100090228987264</a> </p><p>成為這個頻道的會員並獲得福利： <a href="https://www.youtube.com/channel/UCine3_lVU-rFDRRI8xeImHA/join">https://www.youtube.com/channel/UCine3_lVU-rFDRRI8xeImHA/join</a> </p><p>抖內JackEllie(本功能沒有任何福利，但謝謝你的錢): <a href="https://www.buymeacoffee.com/otakuya202y">https://www.buymeacoffee.com/otakuya202y</a> ===================================================================== </p><p>本篇為ComfyUI入門三部曲的第三部基礎操作篇，延續第二篇的內容基本上是杰克的一段教學精華，看完這篇相信你可以更好的理解ComfyUI基礎操作功能。</p><p></p><p>基本的工作流下載:</p><p><a href="https://github.com/JackEllie/ComfyWorkflow/tree/main/Basic%20workflow">https://github.com/JackEllie/ComfyWorkflow/tree/main/Basic%20workflow</a></p><p></p><p>第一篇</p><p><a href="https://youtu.be/7WZCvVrw7To">https://youtu.be/7WZCvVrw7To</a></p><p></p><p>第二篇</p><p><a href="https://youtu.be/g0xYOVybAVc">https://youtu.be/g0xYOVybAVc</a></p><p></p><p>#stablediffusion #aidrawing #ai繪圖 #aiart #aigc #安裝教學 #comfyui #workflow</p>]]></content:encoded>
      <itunes:image href="https://i.ytimg.com/vi/0-x2-Ow_a7s/hqdefault.jpg"/>
      <pubDate>2024-10-18T11:00:00.000Z</pubDate>
    </item><item>
      <title><![CDATA[#2 ComfyUI入門三部曲-基礎入門]]></title>
      <link>https://www.youtube.com/watch?v=g0xYOVybAVc</link>
      <itunes:title><![CDATA[#2 ComfyUI入門三部曲-基礎入門]]></itunes:title>
      <itunes:author><![CDATA[杰克艾米立]]></itunes:author>
      <itunes:summary>
        <![CDATA[<hr style="clear:both" />

<h1>ComfyUI 基礎入門：介面與節點簡介</h1><br /> <br /> 作者在影片開頭介紹了 ComfyUI 的介面，並提醒觀眾如果還未下載應盡快，以免影響後續操作。作者說明 ComfyUI 本質上是一個程式碼的包裝器或封裝裝置，任何可以用程式碼表示的功能，都可以被轉移到 ComfyUI 上，這並不限於 AI 或 Stable Diffusion 的特定功能。作者舉例說明，ComfyUI 不僅能處理與 Stable Diffusion 相關的任務，如生成 Normal Map，也能運用獨立於 Stable Diffusion 本體之外的工具（如 SUPIR），或結合文本轉音樂模型（Stable Audio）和音訊分離模型，來實現更複雜的功能，例如將音樂、人聲和低音分離後再重新組合成一首新歌。這些功能的實現都依賴於 ComfyUI 中的基本單元——「節點」。<br /> <br /> <h1>節點的概念與應用範圍</h1><br /> <br /> 作者進一步解釋了「節點」的概念，並將其比喻為音樂界連接效果器的文化，特別是美國樂手如何將效果器以複雜的方式串聯。作者指出，觀眾現在看到的 ComfyUI 節點，在過去的實體世界中就是這些連接的硬體。節點的應用範圍廣泛，不僅在 ComfyUI 中，也在 3D 軟體如 Blender 和遊戲引擎的 Shader Graph 中被普遍使用，用於定義視覺效果或處理資料流程。作者強調，每個節點都有固定的資料輸入和輸出內容，例如在 ComfyUI 中最常見的檢查點節點（Checkpoint），它包含了模型、Clip（文本編碼器）和 VAE（變分自編碼器）這三個主要部分，並會輸出不同的資料內容。<br /> <br /> <h1>ComfyUI 的優點</h1><br /> <br /> 作者詳細列舉了 ComfyUI 的多項優點。首先是更新速度非常快，幾乎每天都有更新。其次，節點的開發非常容易，即使是相對不熟悉程式設計的人也能進行開發，新的研究成果和程式碼可以迅速被封裝成 ComfyUI 的節點。此外，工作流的共享非常便捷，只需一張圖片（包含工作流資訊）即可分享。安裝過程也相對容易，並且提供了自由度高的使用環境，因為每個節點都是獨立的，可以在節點之間輕鬆插入額外的程式碼。作者認為 ComfyUI 體現了物件導向程式設計的優點。在記憶體管理方面，ComfyUI 比 WebUI 更為優秀，它擁有自己的記憶體管理系統，能自動根據電腦的記憶體資源調整工作模式，使用者無需像在 WebUI 中那樣手動設定特定的 VRAM 參數。<br /> <br /> <h1>ComfyUI 的缺點與挑戰</h1><br /> <br /> 儘管優點眾多，ComfyUI 也存在明顯的缺點和挑戰。首先是自定義節點的數量龐大（作者提到至少有 1300 多個），功能重複性高，這使得使用者難以判斷哪些節點是自己需要的，也容易造成選擇困難。另一個嚴重的問題是存在資安風險，尤其是透過直接從 Git 倉庫 Clone 方式安裝節點時（作者強烈建議不要這麼做），可能導致資安漏洞。作者警告，如果有人要求你透過命令列（如 PowerShell）並使用 Git Clone 指令安裝節點，應拒絕執行，因為這可能意味著該節點過舊或存在問題。此外，由於使用者可能不清楚每個節點的具體功能和作用，操作和駕馭每個節點變得困難，例如在 WebUI 中只需勾選即可完成的臉部修復功能（Adetailer），在 ComfyUI 中卻需要連接多個複雜的節點才能實現，這要求使用者對底層原理有更深入的理解才能有效使用。最後一個問題是環境衝突，ComfyUI 底層使用 Python，不同的節點可能依賴不同版本或不同組合的 Python 套件，這可能導致套件間的需求衝突，進而造成部分節點無法使用，甚至損壞現有的工作環境，而修復這種環境錯誤通常非常麻煩且耗時，最簡單的解決方法往往是重新安裝整個 Python 環境。因此，在安裝節點時必須格外謹慎。<br /> <br /> <h1>ComfyUI 的安裝與初始設定</h1><br /> <br /> 作者接著指導觀眾如何進行 ComfyUI 的安裝和初始設定。他提到兩種主要的本機安裝方式：下載懶人包（`.7z` 壓縮檔）或使用 `comfyui-cil` 套件管理工具（類似 PIP）。作者推薦一般使用者下載懶人包，因為 `comfyui-cil` 更適合需要自訂安裝或在不同環境使用的進階使用者。對於使用 Colab 的朋友，作者表示之前已分享過設定方法，原則上是連接後將模型資料夾與 WebUI 共用。在安裝節點方面，作者提到初始安裝常用節點可能很耗時，建議可以跳過部分初始安裝，改為在實際需要時再安裝個別節點，這樣或許能更省時。接著，作者示範了 ComfyUI 介面的幾個實用設定：在右上角的設定中，將選單樣式改為新的「Top」格式，並開啟「吸附網格」功能，這有助於整理工作流的排版。作者也提到文本補齊功能，類似 WebUI 的標籤自動完成。所有設定更改後，直接關閉設定視窗即可自動保存。作者還展示了如何載入網路上的 Prompt 標籤清單，對於使用動漫模型的用戶尤其方便。<br /> <br /> <h1>基本的文生圖（T2I）工作流</h1><br /> <br /> 作者展示了 ComfyUI 中最基本的文生圖（Text-to-Image, T2I）工作流的構成。他說明如何載入預設工作流，以及如何儲存自己的工作流（包括示範了儲存中文名稱的工作流）。作者也指出了一個關於儲存工作流可能遇到的 Bug 及其解決方法：在 ComfyUI 的使用者資料夾（通常是 `ComfyUI/user`）下，手動建立一個名為 `workflows` 的資料夾，將儲存的工作流圖片檔案放進去，就能在介面中讀取。接著，作者深入講解了 T2I 工作流的幾個核心組件：<br /> <br /> 1.  **Checkpoint (檢查點):** 載入整個模型，包含 Model、Clip 和 VAE。<br /> 2.  **Clip (文本編碼器):** 負責將輸入的文字（Prompt）轉換為模型能理解的向量（Vector）或稱為「條件」（Condition）。這個向量包含了文字所描述概念的近似資訊，模型會根據這些近似值去判斷生成內容的相關性。<br /> 3.  **Empty Latent Image (空的 Latent 圖像):** 這是生成過程的起點，為採樣器提供一個空白的畫布，但這個畫布並非普通的像素圖像，而是在潛空間（Latent Space）中的圖像，這是模型能理解的格式。<br /> 4.  **K-Sampler (採樣器):** 接收 Clip 輸出的條件、空的 Latent 圖像以及 Model 的 U-Net 部分。採樣器的主要工作是依照正負向 Prompt 的條件，對 Latent 圖像進行降噪（Denoising）。不同的採樣器使用不同的數學演算法進行降噪，影響最終圖像的風格和品質。<br /> 5.  **VAE (變分自編碼器):** VAE 是一個能進行編碼（Image -> Latent）和解碼（Latent -> Image）的工具。在 T2I 工作流的最後，VAE 解碼器會將採樣器輸出的降噪完成的 Latent 圖像轉換回人眼可見的像素圖像。ComfyUI 允許獨立載入 VAE 模型，或由主模型自動載入。<br /> <br /> <h1>Flux 模型載入範例與注意事項</h1><br /> <br /> 作者以較新的 Flux 模型為例，說明了載入大型模型時可能遇到的額外複雜性。由於 Flux 模型體積龐大，其核心部分（UNet）、Clip 和 VAE 通常是分開儲存的。因此，載入 Flux 模型時，需要使用特定的「UNet 載入器」來載入 UNet 部分，並且需要單獨載入 Clip。作者特別指出，Flux 使用了兩個 Clip（SD 1.5 的 Clip I 和 Google 的 T5XXL），所以需要使用「雙 Clip 載入器」。載入 Flux 模型時，還需要注意選擇正確的權重格式（如 FP8），否則可能導致電腦無法運行。此外，Flux 模型對系統記憶體（RAM）的消耗很大，運行時 RAM 大幅增加是正常現象。<br /> <br /> <h1>結語與提問</h1><br /> <br /> 作者總結了基本的文生圖工作流流程，從文字輸入到 Clip 轉為條件，空的 Latent 圖像作為畫布，採樣器結合 U-Net 進行降噪，最後由 VAE 解碼成可見圖像。他再次詢問觀眾是否有任何問題，並鼓勵提出，如果沒有，則建議稍作休息用餐。作者也在影片中提到在管理節點時，可以在節點屬性中設定顯示 ID 和簡稱的標籤，方便快速查找內建節點（有小狐狸圖示）和自定義節點。

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=g0xYOVybAVc">https://www.youtube.com/watch?v=g0xYOVybAVc</a></p><p>加入Discord: <a href="https://discord.gg/TM5d89YNwA">https://discord.gg/TM5d89YNwA</a></p><p></p><p>FB粉專: <a href="https://www.facebook.com/profile.php?id=100090228987264">https://www.facebook.com/profile.php?id=100090228987264</a></p><p></p><p>成為這個頻道的會員並獲得福利： <a href="https://www.youtube.com/channel/UCine3_lVU-rFDRRI8xeImHA/join">https://www.youtube.com/channel/UCine3_lVU-rFDRRI8xeImHA/join</a> </p><p></p><p>抖內JackEllie(本功能沒有任何福利，但謝謝你的錢): <a href="https://www.buymeacoffee.com/otakuya202y">https://www.buymeacoffee.com/otakuya202y</a> =====================================================================</p><p>本篇為ComfyUI入門三部曲的第二部基礎入門篇，事實上是杰克的一段教學精華，看完這篇相信你可以更好的理解ComfyUI相關基礎。</p><p></p><p>comfyui懶人包安裝影片:</p><p><a href="https://youtu.be/7WZCvVrw7To">https://youtu.be/7WZCvVrw7To</a></p><p></p><p>影片中用到的載點</p><p>懶人包:</p><p><a href="https://github.com/comfyanonymous/ComfyUI/releases/latest/download/ComfyUI_windows_portable_nvidia.7z">https://github.com/comfyanonymous/ComfyUI/releases/latest/download/ComfyUI_windows_portable_nvidia.7z</a></p><p></p><p>Colab版:</p><p><a href="https://colab.research.google.com/drive/1tLzMuqwUiB43Xg9m_8R4vtr-awCnlpAA?usp=sharing">https://colab.research.google.com/drive/1tLzMuqwUiB43Xg9m_8R4vtr-awCnlpAA?usp=sharing</a></p>]]>
      </itunes:summary>
      <description>
        <![CDATA[<hr style="clear:both" />

<h1>ComfyUI 基礎入門：介面與節點簡介</h1><br /> <br /> 作者在影片開頭介紹了 ComfyUI 的介面，並提醒觀眾如果還未下載應盡快，以免影響後續操作。作者說明 ComfyUI 本質上是一個程式碼的包裝器或封裝裝置，任何可以用程式碼表示的功能，都可以被轉移到 ComfyUI 上，這並不限於 AI 或 Stable Diffusion 的特定功能。作者舉例說明，ComfyUI 不僅能處理與 Stable Diffusion 相關的任務，如生成 Normal Map，也能運用獨立於 Stable Diffusion 本體之外的工具（如 SUPIR），或結合文本轉音樂模型（Stable Audio）和音訊分離模型，來實現更複雜的功能，例如將音樂、人聲和低音分離後再重新組合成一首新歌。這些功能的實現都依賴於 ComfyUI 中的基本單元——「節點」。<br /> <br /> <h1>節點的概念與應用範圍</h1><br /> <br /> 作者進一步解釋了「節點」的概念，並將其比喻為音樂界連接效果器的文化，特別是美國樂手如何將效果器以複雜的方式串聯。作者指出，觀眾現在看到的 ComfyUI 節點，在過去的實體世界中就是這些連接的硬體。節點的應用範圍廣泛，不僅在 ComfyUI 中，也在 3D 軟體如 Blender 和遊戲引擎的 Shader Graph 中被普遍使用，用於定義視覺效果或處理資料流程。作者強調，每個節點都有固定的資料輸入和輸出內容，例如在 ComfyUI 中最常見的檢查點節點（Checkpoint），它包含了模型、Clip（文本編碼器）和 VAE（變分自編碼器）這三個主要部分，並會輸出不同的資料內容。<br /> <br /> <h1>ComfyUI 的優點</h1><br /> <br /> 作者詳細列舉了 ComfyUI 的多項優點。首先是更新速度非常快，幾乎每天都有更新。其次，節點的開發非常容易，即使是相對不熟悉程式設計的人也能進行開發，新的研究成果和程式碼可以迅速被封裝成 ComfyUI 的節點。此外，工作流的共享非常便捷，只需一張圖片（包含工作流資訊）即可分享。安裝過程也相對容易，並且提供了自由度高的使用環境，因為每個節點都是獨立的，可以在節點之間輕鬆插入額外的程式碼。作者認為 ComfyUI 體現了物件導向程式設計的優點。在記憶體管理方面，ComfyUI 比 WebUI 更為優秀，它擁有自己的記憶體管理系統，能自動根據電腦的記憶體資源調整工作模式，使用者無需像在 WebUI 中那樣手動設定特定的 VRAM 參數。<br /> <br /> <h1>ComfyUI 的缺點與挑戰</h1><br /> <br /> 儘管優點眾多，ComfyUI 也存在明顯的缺點和挑戰。首先是自定義節點的數量龐大（作者提到至少有 1300 多個），功能重複性高，這使得使用者難以判斷哪些節點是自己需要的，也容易造成選擇困難。另一個嚴重的問題是存在資安風險，尤其是透過直接從 Git 倉庫 Clone 方式安裝節點時（作者強烈建議不要這麼做），可能導致資安漏洞。作者警告，如果有人要求你透過命令列（如 PowerShell）並使用 Git Clone 指令安裝節點，應拒絕執行，因為這可能意味著該節點過舊或存在問題。此外，由於使用者可能不清楚每個節點的具體功能和作用，操作和駕馭每個節點變得困難，例如在 WebUI 中只需勾選即可完成的臉部修復功能（Adetailer），在 ComfyUI 中卻需要連接多個複雜的節點才能實現，這要求使用者對底層原理有更深入的理解才能有效使用。最後一個問題是環境衝突，ComfyUI 底層使用 Python，不同的節點可能依賴不同版本或不同組合的 Python 套件，這可能導致套件間的需求衝突，進而造成部分節點無法使用，甚至損壞現有的工作環境，而修復這種環境錯誤通常非常麻煩且耗時，最簡單的解決方法往往是重新安裝整個 Python 環境。因此，在安裝節點時必須格外謹慎。<br /> <br /> <h1>ComfyUI 的安裝與初始設定</h1><br /> <br /> 作者接著指導觀眾如何進行 ComfyUI 的安裝和初始設定。他提到兩種主要的本機安裝方式：下載懶人包（`.7z` 壓縮檔）或使用 `comfyui-cil` 套件管理工具（類似 PIP）。作者推薦一般使用者下載懶人包，因為 `comfyui-cil` 更適合需要自訂安裝或在不同環境使用的進階使用者。對於使用 Colab 的朋友，作者表示之前已分享過設定方法，原則上是連接後將模型資料夾與 WebUI 共用。在安裝節點方面，作者提到初始安裝常用節點可能很耗時，建議可以跳過部分初始安裝，改為在實際需要時再安裝個別節點，這樣或許能更省時。接著，作者示範了 ComfyUI 介面的幾個實用設定：在右上角的設定中，將選單樣式改為新的「Top」格式，並開啟「吸附網格」功能，這有助於整理工作流的排版。作者也提到文本補齊功能，類似 WebUI 的標籤自動完成。所有設定更改後，直接關閉設定視窗即可自動保存。作者還展示了如何載入網路上的 Prompt 標籤清單，對於使用動漫模型的用戶尤其方便。<br /> <br /> <h1>基本的文生圖（T2I）工作流</h1><br /> <br /> 作者展示了 ComfyUI 中最基本的文生圖（Text-to-Image, T2I）工作流的構成。他說明如何載入預設工作流，以及如何儲存自己的工作流（包括示範了儲存中文名稱的工作流）。作者也指出了一個關於儲存工作流可能遇到的 Bug 及其解決方法：在 ComfyUI 的使用者資料夾（通常是 `ComfyUI/user`）下，手動建立一個名為 `workflows` 的資料夾，將儲存的工作流圖片檔案放進去，就能在介面中讀取。接著，作者深入講解了 T2I 工作流的幾個核心組件：<br /> <br /> 1.  **Checkpoint (檢查點):** 載入整個模型，包含 Model、Clip 和 VAE。<br /> 2.  **Clip (文本編碼器):** 負責將輸入的文字（Prompt）轉換為模型能理解的向量（Vector）或稱為「條件」（Condition）。這個向量包含了文字所描述概念的近似資訊，模型會根據這些近似值去判斷生成內容的相關性。<br /> 3.  **Empty Latent Image (空的 Latent 圖像):** 這是生成過程的起點，為採樣器提供一個空白的畫布，但這個畫布並非普通的像素圖像，而是在潛空間（Latent Space）中的圖像，這是模型能理解的格式。<br /> 4.  **K-Sampler (採樣器):** 接收 Clip 輸出的條件、空的 Latent 圖像以及 Model 的 U-Net 部分。採樣器的主要工作是依照正負向 Prompt 的條件，對 Latent 圖像進行降噪（Denoising）。不同的採樣器使用不同的數學演算法進行降噪，影響最終圖像的風格和品質。<br /> 5.  **VAE (變分自編碼器):** VAE 是一個能進行編碼（Image -> Latent）和解碼（Latent -> Image）的工具。在 T2I 工作流的最後，VAE 解碼器會將採樣器輸出的降噪完成的 Latent 圖像轉換回人眼可見的像素圖像。ComfyUI 允許獨立載入 VAE 模型，或由主模型自動載入。<br /> <br /> <h1>Flux 模型載入範例與注意事項</h1><br /> <br /> 作者以較新的 Flux 模型為例，說明了載入大型模型時可能遇到的額外複雜性。由於 Flux 模型體積龐大，其核心部分（UNet）、Clip 和 VAE 通常是分開儲存的。因此，載入 Flux 模型時，需要使用特定的「UNet 載入器」來載入 UNet 部分，並且需要單獨載入 Clip。作者特別指出，Flux 使用了兩個 Clip（SD 1.5 的 Clip I 和 Google 的 T5XXL），所以需要使用「雙 Clip 載入器」。載入 Flux 模型時，還需要注意選擇正確的權重格式（如 FP8），否則可能導致電腦無法運行。此外，Flux 模型對系統記憶體（RAM）的消耗很大，運行時 RAM 大幅增加是正常現象。<br /> <br /> <h1>結語與提問</h1><br /> <br /> 作者總結了基本的文生圖工作流流程，從文字輸入到 Clip 轉為條件，空的 Latent 圖像作為畫布，採樣器結合 U-Net 進行降噪，最後由 VAE 解碼成可見圖像。他再次詢問觀眾是否有任何問題，並鼓勵提出，如果沒有，則建議稍作休息用餐。作者也在影片中提到在管理節點時，可以在節點屬性中設定顯示 ID 和簡稱的標籤，方便快速查找內建節點（有小狐狸圖示）和自定義節點。

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=g0xYOVybAVc">https://www.youtube.com/watch?v=g0xYOVybAVc</a></p><p>加入Discord: <a href="https://discord.gg/TM5d89YNwA">https://discord.gg/TM5d89YNwA</a></p><p></p><p>FB粉專: <a href="https://www.facebook.com/profile.php?id=100090228987264">https://www.facebook.com/profile.php?id=100090228987264</a></p><p></p><p>成為這個頻道的會員並獲得福利： <a href="https://www.youtube.com/channel/UCine3_lVU-rFDRRI8xeImHA/join">https://www.youtube.com/channel/UCine3_lVU-rFDRRI8xeImHA/join</a> </p><p></p><p>抖內JackEllie(本功能沒有任何福利，但謝謝你的錢): <a href="https://www.buymeacoffee.com/otakuya202y">https://www.buymeacoffee.com/otakuya202y</a> =====================================================================</p><p>本篇為ComfyUI入門三部曲的第二部基礎入門篇，事實上是杰克的一段教學精華，看完這篇相信你可以更好的理解ComfyUI相關基礎。</p><p></p><p>comfyui懶人包安裝影片:</p><p><a href="https://youtu.be/7WZCvVrw7To">https://youtu.be/7WZCvVrw7To</a></p><p></p><p>影片中用到的載點</p><p>懶人包:</p><p><a href="https://github.com/comfyanonymous/ComfyUI/releases/latest/download/ComfyUI_windows_portable_nvidia.7z">https://github.com/comfyanonymous/ComfyUI/releases/latest/download/ComfyUI_windows_portable_nvidia.7z</a></p><p></p><p>Colab版:</p><p><a href="https://colab.research.google.com/drive/1tLzMuqwUiB43Xg9m_8R4vtr-awCnlpAA?usp=sharing">https://colab.research.google.com/drive/1tLzMuqwUiB43Xg9m_8R4vtr-awCnlpAA?usp=sharing</a></p>]]>
      </description>
      <content:encoded><![CDATA[<hr style="clear:both" />

<h1>ComfyUI 基礎入門：介面與節點簡介</h1><br /> <br /> 作者在影片開頭介紹了 ComfyUI 的介面，並提醒觀眾如果還未下載應盡快，以免影響後續操作。作者說明 ComfyUI 本質上是一個程式碼的包裝器或封裝裝置，任何可以用程式碼表示的功能，都可以被轉移到 ComfyUI 上，這並不限於 AI 或 Stable Diffusion 的特定功能。作者舉例說明，ComfyUI 不僅能處理與 Stable Diffusion 相關的任務，如生成 Normal Map，也能運用獨立於 Stable Diffusion 本體之外的工具（如 SUPIR），或結合文本轉音樂模型（Stable Audio）和音訊分離模型，來實現更複雜的功能，例如將音樂、人聲和低音分離後再重新組合成一首新歌。這些功能的實現都依賴於 ComfyUI 中的基本單元——「節點」。<br /> <br /> <h1>節點的概念與應用範圍</h1><br /> <br /> 作者進一步解釋了「節點」的概念，並將其比喻為音樂界連接效果器的文化，特別是美國樂手如何將效果器以複雜的方式串聯。作者指出，觀眾現在看到的 ComfyUI 節點，在過去的實體世界中就是這些連接的硬體。節點的應用範圍廣泛，不僅在 ComfyUI 中，也在 3D 軟體如 Blender 和遊戲引擎的 Shader Graph 中被普遍使用，用於定義視覺效果或處理資料流程。作者強調，每個節點都有固定的資料輸入和輸出內容，例如在 ComfyUI 中最常見的檢查點節點（Checkpoint），它包含了模型、Clip（文本編碼器）和 VAE（變分自編碼器）這三個主要部分，並會輸出不同的資料內容。<br /> <br /> <h1>ComfyUI 的優點</h1><br /> <br /> 作者詳細列舉了 ComfyUI 的多項優點。首先是更新速度非常快，幾乎每天都有更新。其次，節點的開發非常容易，即使是相對不熟悉程式設計的人也能進行開發，新的研究成果和程式碼可以迅速被封裝成 ComfyUI 的節點。此外，工作流的共享非常便捷，只需一張圖片（包含工作流資訊）即可分享。安裝過程也相對容易，並且提供了自由度高的使用環境，因為每個節點都是獨立的，可以在節點之間輕鬆插入額外的程式碼。作者認為 ComfyUI 體現了物件導向程式設計的優點。在記憶體管理方面，ComfyUI 比 WebUI 更為優秀，它擁有自己的記憶體管理系統，能自動根據電腦的記憶體資源調整工作模式，使用者無需像在 WebUI 中那樣手動設定特定的 VRAM 參數。<br /> <br /> <h1>ComfyUI 的缺點與挑戰</h1><br /> <br /> 儘管優點眾多，ComfyUI 也存在明顯的缺點和挑戰。首先是自定義節點的數量龐大（作者提到至少有 1300 多個），功能重複性高，這使得使用者難以判斷哪些節點是自己需要的，也容易造成選擇困難。另一個嚴重的問題是存在資安風險，尤其是透過直接從 Git 倉庫 Clone 方式安裝節點時（作者強烈建議不要這麼做），可能導致資安漏洞。作者警告，如果有人要求你透過命令列（如 PowerShell）並使用 Git Clone 指令安裝節點，應拒絕執行，因為這可能意味著該節點過舊或存在問題。此外，由於使用者可能不清楚每個節點的具體功能和作用，操作和駕馭每個節點變得困難，例如在 WebUI 中只需勾選即可完成的臉部修復功能（Adetailer），在 ComfyUI 中卻需要連接多個複雜的節點才能實現，這要求使用者對底層原理有更深入的理解才能有效使用。最後一個問題是環境衝突，ComfyUI 底層使用 Python，不同的節點可能依賴不同版本或不同組合的 Python 套件，這可能導致套件間的需求衝突，進而造成部分節點無法使用，甚至損壞現有的工作環境，而修復這種環境錯誤通常非常麻煩且耗時，最簡單的解決方法往往是重新安裝整個 Python 環境。因此，在安裝節點時必須格外謹慎。<br /> <br /> <h1>ComfyUI 的安裝與初始設定</h1><br /> <br /> 作者接著指導觀眾如何進行 ComfyUI 的安裝和初始設定。他提到兩種主要的本機安裝方式：下載懶人包（`.7z` 壓縮檔）或使用 `comfyui-cil` 套件管理工具（類似 PIP）。作者推薦一般使用者下載懶人包，因為 `comfyui-cil` 更適合需要自訂安裝或在不同環境使用的進階使用者。對於使用 Colab 的朋友，作者表示之前已分享過設定方法，原則上是連接後將模型資料夾與 WebUI 共用。在安裝節點方面，作者提到初始安裝常用節點可能很耗時，建議可以跳過部分初始安裝，改為在實際需要時再安裝個別節點，這樣或許能更省時。接著，作者示範了 ComfyUI 介面的幾個實用設定：在右上角的設定中，將選單樣式改為新的「Top」格式，並開啟「吸附網格」功能，這有助於整理工作流的排版。作者也提到文本補齊功能，類似 WebUI 的標籤自動完成。所有設定更改後，直接關閉設定視窗即可自動保存。作者還展示了如何載入網路上的 Prompt 標籤清單，對於使用動漫模型的用戶尤其方便。<br /> <br /> <h1>基本的文生圖（T2I）工作流</h1><br /> <br /> 作者展示了 ComfyUI 中最基本的文生圖（Text-to-Image, T2I）工作流的構成。他說明如何載入預設工作流，以及如何儲存自己的工作流（包括示範了儲存中文名稱的工作流）。作者也指出了一個關於儲存工作流可能遇到的 Bug 及其解決方法：在 ComfyUI 的使用者資料夾（通常是 `ComfyUI/user`）下，手動建立一個名為 `workflows` 的資料夾，將儲存的工作流圖片檔案放進去，就能在介面中讀取。接著，作者深入講解了 T2I 工作流的幾個核心組件：<br /> <br /> 1.  **Checkpoint (檢查點):** 載入整個模型，包含 Model、Clip 和 VAE。<br /> 2.  **Clip (文本編碼器):** 負責將輸入的文字（Prompt）轉換為模型能理解的向量（Vector）或稱為「條件」（Condition）。這個向量包含了文字所描述概念的近似資訊，模型會根據這些近似值去判斷生成內容的相關性。<br /> 3.  **Empty Latent Image (空的 Latent 圖像):** 這是生成過程的起點，為採樣器提供一個空白的畫布，但這個畫布並非普通的像素圖像，而是在潛空間（Latent Space）中的圖像，這是模型能理解的格式。<br /> 4.  **K-Sampler (採樣器):** 接收 Clip 輸出的條件、空的 Latent 圖像以及 Model 的 U-Net 部分。採樣器的主要工作是依照正負向 Prompt 的條件，對 Latent 圖像進行降噪（Denoising）。不同的採樣器使用不同的數學演算法進行降噪，影響最終圖像的風格和品質。<br /> 5.  **VAE (變分自編碼器):** VAE 是一個能進行編碼（Image -> Latent）和解碼（Latent -> Image）的工具。在 T2I 工作流的最後，VAE 解碼器會將採樣器輸出的降噪完成的 Latent 圖像轉換回人眼可見的像素圖像。ComfyUI 允許獨立載入 VAE 模型，或由主模型自動載入。<br /> <br /> <h1>Flux 模型載入範例與注意事項</h1><br /> <br /> 作者以較新的 Flux 模型為例，說明了載入大型模型時可能遇到的額外複雜性。由於 Flux 模型體積龐大，其核心部分（UNet）、Clip 和 VAE 通常是分開儲存的。因此，載入 Flux 模型時，需要使用特定的「UNet 載入器」來載入 UNet 部分，並且需要單獨載入 Clip。作者特別指出，Flux 使用了兩個 Clip（SD 1.5 的 Clip I 和 Google 的 T5XXL），所以需要使用「雙 Clip 載入器」。載入 Flux 模型時，還需要注意選擇正確的權重格式（如 FP8），否則可能導致電腦無法運行。此外，Flux 模型對系統記憶體（RAM）的消耗很大，運行時 RAM 大幅增加是正常現象。<br /> <br /> <h1>結語與提問</h1><br /> <br /> 作者總結了基本的文生圖工作流流程，從文字輸入到 Clip 轉為條件，空的 Latent 圖像作為畫布，採樣器結合 U-Net 進行降噪，最後由 VAE 解碼成可見圖像。他再次詢問觀眾是否有任何問題，並鼓勵提出，如果沒有，則建議稍作休息用餐。作者也在影片中提到在管理節點時，可以在節點屬性中設定顯示 ID 和簡稱的標籤，方便快速查找內建節點（有小狐狸圖示）和自定義節點。

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=g0xYOVybAVc">https://www.youtube.com/watch?v=g0xYOVybAVc</a></p><p>加入Discord: <a href="https://discord.gg/TM5d89YNwA">https://discord.gg/TM5d89YNwA</a></p><p></p><p>FB粉專: <a href="https://www.facebook.com/profile.php?id=100090228987264">https://www.facebook.com/profile.php?id=100090228987264</a></p><p></p><p>成為這個頻道的會員並獲得福利： <a href="https://www.youtube.com/channel/UCine3_lVU-rFDRRI8xeImHA/join">https://www.youtube.com/channel/UCine3_lVU-rFDRRI8xeImHA/join</a> </p><p></p><p>抖內JackEllie(本功能沒有任何福利，但謝謝你的錢): <a href="https://www.buymeacoffee.com/otakuya202y">https://www.buymeacoffee.com/otakuya202y</a> =====================================================================</p><p>本篇為ComfyUI入門三部曲的第二部基礎入門篇，事實上是杰克的一段教學精華，看完這篇相信你可以更好的理解ComfyUI相關基礎。</p><p></p><p>comfyui懶人包安裝影片:</p><p><a href="https://youtu.be/7WZCvVrw7To">https://youtu.be/7WZCvVrw7To</a></p><p></p><p>影片中用到的載點</p><p>懶人包:</p><p><a href="https://github.com/comfyanonymous/ComfyUI/releases/latest/download/ComfyUI_windows_portable_nvidia.7z">https://github.com/comfyanonymous/ComfyUI/releases/latest/download/ComfyUI_windows_portable_nvidia.7z</a></p><p></p><p>Colab版:</p><p><a href="https://colab.research.google.com/drive/1tLzMuqwUiB43Xg9m_8R4vtr-awCnlpAA?usp=sharing">https://colab.research.google.com/drive/1tLzMuqwUiB43Xg9m_8R4vtr-awCnlpAA?usp=sharing</a></p>]]></content:encoded>
      <itunes:image href="https://i.ytimg.com/vi/g0xYOVybAVc/hqdefault.jpg"/>
      <pubDate>2024-09-20T11:00:44.000Z</pubDate>
    </item><item>
      <title><![CDATA[2024年最好的開源模型Flux磅礡登場!!付6GVRAM使用說明書]]></title>
      <link>https://www.youtube.com/watch?v=Nrkh_E6iuwA</link>
      <itunes:title><![CDATA[2024年最好的開源模型Flux磅礡登場!!付6GVRAM使用說明書]]></itunes:title>
      <itunes:author><![CDATA[杰克艾米立]]></itunes:author>
      <itunes:summary>
        <![CDATA[<hr style="clear:both" />

<p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">敘述者開場，介紹了傑克與艾粒。他們提到近期關於 Stability AI 的爭議以及 SD3 模型發布後遇到的問題，導致公司內部人才流失。然而，這些離開的大佬們很快成立了「黑森林工作室」，並釋出了目前開源領域中最大的模型 Flux。他們讚揚了 Flux 的優秀性能，特別是在提示詞控制、建築結構和人物肢體方面的表現，認為它遠超之前的模型。<br /> 儘管 Flux 性能優異，但由於模型龐大，其 VRAM 需求很高。不過，敘述者接著宣布了好消息：在八月十一日，「貓神伊利維亞斯」發布了經過壓縮的 Flux 模型，並更新了 Forge 的版本。這一改動使得 Flux 現在可以在僅有 6GB VRAM 的設備上運作，因此他們決定製作這支影片來詳細介紹使用方法。在開始教學前，他們也提到這次影片將舉辦抽獎活動，贈送一本名為《超有料！職場第一實用的 AI 工作術》的書籍，並簡述了 AI 在處理職場日常問題上的應用。<br /> <h1>安裝 Forge 與 Flux 模型</h1><br /> 敘述者接著指導觀眾如何安裝 Forge。由於 Forge 曾停更一段時間導致部分功能異常，現在安裝流程已更新為「Reforge 懶人包」。觀眾需要前往影片下方的說明區下載此懶人包文件，其中包含了下載連結、已知未受影響的擴充列表以及共享模型的命令。如果對使用方法不清楚，可以參考他們先前的 Forge 教學影片。下載完成懶人包後，觀眾只需點選其中的 `update` 檔案進行更新，等待系統提示「請按任意鍵繼續」後即可關閉。未來啟動 Forge 只需點選 `run` 檔案。不過，由於啟動時會自動下載模型，建議先手動下載 Flux 模型並放置好後再執行 `run`。對於已安裝 Forge 的用戶，更新到最新版本後可能會發現部分擴充無法使用，需要先整理一下。<br /> 接下來是 Flux 模型的下載與存放。敘述者請觀眾從下方說明區下載經過壓縮的 Flux 模型。目前提供兩種格式：FP8 和 NF4。雖然作者建議 30、40 系列顯卡使用 NF4，其餘顯卡使用 FP8，但他們也見到有 10、20 系列顯卡成功使用 NF4 的案例。考量到 NF4 格式 VRAM 需求較低，且在低階顯卡上加速效果明顯，他們一律推薦觀眾優先嘗試 NF4，若無法使用再改用 FP8。下載的模型需要放置到指定的路徑。此外，敘述者提到還有一種 GGUF 格式，但使用較為複雜（需要額外下載文本編碼器和 VAE），有興趣的觀眾可以在他們的 Discord 群組中找到相關的使用文章。<br /> <h1>Flux 模型使用教學</h1><br /> Forge 更新到最新版本並將 Flux 模型放好後，敘述者開始介紹在 Forge 介面中如何使用 Flux。他們指出，介面最上方選擇模型權重存檔點（Checkpoint）的部分有所改動。現在只需選擇 UI 的類型，就能了解需要調整哪些參數。觀眾應選擇「Flux」，然後在「Diffusion with Low Bits」選項下選擇剛剛下載的模型。<br /> 敘述者詳細解釋了幾個重要的參數設定：<br /> 首先是「儲存格式」（Storage Format），這依照選擇的格式會顯著影響計算時間和些微的圖像變化。<br /> 再來是「Swap Method」，這是 RAM 與 VRAM 之間交換資料的方式。「Async」速度較快，但可能在使用中消耗過多 VRAM，導致進入共用記憶體而使運算速度大幅下降。「Queue」則是一種穩定的運算方式，讓每一層排隊逐個進行計算。敘述者在此推薦選擇「Queue」。如果遇到其他問題，建議查看下方說明區中，伊利維亞斯在 Github 上的除錯方法。<br /> 接著是「Swap Location」。由於模型龐大，在低 VRAM 硬體下不足以完全載入，需要 CPU 或共用記憶體協助。經過作者測試，在較新的硬體上，選擇「共用記憶體」比使用 CPU 快約 15%，但如果系統崩潰，則建議改回 CPU 交換。<br /> 最後是「GPU Weights (MB)」，這裡可以調整模型使用的 VRAM 空間。降低此值可以確保繪圖時有足夠的 VRAM 餘裕，讓低 VRAM 設備有機會生成更大尺寸的圖像，但算圖速度會下降。提高此值則能加快運算，但若設定太高導致 VRAM 不足，同樣會進入共用記憶體，大幅拉低速度。觀眾應根據自己的設備進行調整。<br /> 關於取樣方法（Sampler），敘述者建議使用原始設定的 Euler 和 simple (單一值)，或是和 DPM++2M 以及 SGM Uniform 交替使用。<br /> 接著提到「提示詞相關性 CFG」（CFG Scale）。由於 Flux 是經過蒸餾訓練的模型，訓練時不包含 CFG 這類指標，也不適用反向提示詞。因此在繪圖時不建議開啟 CFG，因為它沒有效果，反而會花費雙倍的運算時間。取而代之的是「Distilled CFG Scale」，它僅會稍微改變色澤和些許構圖。<br /> 敘述者總結道，儘管這類模型在訓練上的硬體要求很高，但社群的大家非常快速地訓練出了各種模型，在 C 站上也相當熱鬧，是個非常有前景的模型。這證明了社群的力量，無論模型多大，只要敢於開源，社群就有辦法讓模型在「馬鈴薯」（低階設備）上運作。<br /> 影片最後，敘述者再次提醒這次抽獎活動在影片上架的同時於 Discord 上舉辦，鼓勵大家參與以了解 AI 如何應用於實際工作中。他們提到艾粒目前也在使用 GPT 學習 Blender。最後，傑克與艾粒向觀眾道別。<hr />================================================</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><strong># 片頭</strong></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/Nrkh_E6iuwA_17.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/Nrkh_E6iuwA&t=17" target="_blank"><strong># 簡介</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">大家好我是杰克。大家好我是艾粒。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">相信前陣子。大家都有吃到Stablity AI的瓜。SD3大鍋一砸。不但社群不買單。公司內部的大佬們也紛紛離開。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">不過還好。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">他們很快的。成立了一間黑森林工作室。並釋出了第一個目前在開源世界中。最巨大的模型Flux。這個模型的性能非常優秀。提詞控制效果也很強。建築結構。人物肢體等等。都遠勝於之前的模型。既然他這麼優秀。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">為什麼我們之前沒有介紹呢。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">因為flux模型非常大。所以VRAM要求也就提高了。但!!貓神伊利維亞斯在8月11號時。發布了經過壓縮的flux。並更新了forge的版本。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">現在flux可以在6G VRAM上運作了。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">當然要來好好介紹一下使用方法啦。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/Nrkh_E6iuwA_78.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/Nrkh_E6iuwA&t=78" target="_blank"><strong># 抽書活動</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">喔。一樣在開始之前。我們來抽書吧。這次是這本。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">超有料！職場第一實用的 AI 工作術。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">用對工具讓生產力全面進化。看完這本書你再也不需要擔心。DPF檔原文Paper無法全文翻譯。會議記錄做起來費時又費力。E-mail和信息堆積了一大堆。這些都能靠AI解決。還能讓AI幫忙解釋法律用語。將數據可視化。還能在夜深人靜的時候。陪你喝心靈雞湯。AI現在已經無所不在。記得看到最後喔。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/Nrkh_E6iuwA_117.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/Nrkh_E6iuwA&t=117" target="_blank"><strong># 安裝forge</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">安裝。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">首先我們來安裝Forge吧。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">因為之前Forge停更了一段時間。導致許多功能都不能正常使用。所以Forge安裝篇的懶人包。已經變成Reforge懶人包了。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Forge懶人包就這篇的底下。那就開始安裝吧。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">到影片下方說明。找到懶人包下載文件。裡面有懶人包載點。跟目前已知沒有受影響的擴充。還有共享模型的命令。都在裡面自己看一下吧。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">如果不清楚怎麼用。可以參考之前的forge影片。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">下載完成後。跟我們介紹過的所有懶人包一樣。點選update更新。等系統出現請按任意鍵繼續的提示後關閉。未來要執行只需要點選run就好。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">不過因為啟動後會自動下載模型。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">所以我們先去下載flux模型。之後放好再點run。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">另外如果你本來就有安裝forge。更新到最新版本後。會發現有些擴充不能用了。記得先整理一下。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/Nrkh_E6iuwA_179.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/Nrkh_E6iuwA&t=179" target="_blank"><strong># Flux模型下載</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">模型下載與存放路徑。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">到下方說明下載經過壓縮的Flux模型。目前有兩種格式一種是FP8。另一個是NF4。雖然貓神表示如果你的顯卡是30、40系列。才能使用NF4格式。其餘的應該要下載FP8格式。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">但我們依然有看到10、20系列的顯卡。成功在NF4格式上使用的案例。再加上NF4格式VRAM需求較低。而且在比較低階的顯卡上。加速效果相當明顯。所以我們一律推薦各位使用NF4格式。真的不能使用再改用FP8格式。載好後放到以下路徑吧。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">對了。其實還有另一種GGUF格式。但因為需要另外下載文本編碼器跟VAE。使用起來比較麻煩。有興趣的可以到DC群中。看一下我寫的使用文章。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/Nrkh_E6iuwA_236.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/Nrkh_E6iuwA&t=236" target="_blank"><strong># Flux使用介紹</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">flux使用介紹。把Forge更新到最新版本後。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">會看到介面最上面一列。選擇模型權重存檔點的介面有改動。只要選擇UI的類型。就能知道有哪些參數需要調整。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">點選Flux。接著選擇剛剛下載的模型。Diffusion with Low Bits. 依照硬體和需求選擇儲存格式。依選擇的格式會有很大的時間差距。和些許的圖像變化。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Swap Method. 這是RAM與VRAM之間的交換方式。Asyne的速度較快。但有可能會在運作中使用過多的VRAM。從而進入共用記憶體。導致運算速度劇烈下滑。而Queue的運算方式。則是穩定的讓每一層排隊逐個進行計算。這邊我選Queue。若是還有遇到其他問題。建議到下方說明中。依利維亞斯的github上。看一下除錯方法。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/Nrkh_E6iuwA_300.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">再來是Swap Location。因為模型很大。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">在低vram硬體下。不足以承載模型。需要用到CPU或共用記憶體來幫忙。經過作者測試。在較新的硬體上。選擇共用記憶體交換。比使用CPU快上約百分之15。但若是系統崩潰。則建議選擇CPU交換。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">最後看到GPU Weights (MB)。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">這邊可以調整模型使用的VRAM空間。降低GPU Weights以確保繪製圖像時。有足夠的VRAM可以使用。讓低VRAM的設備。有機會挑戰更大張的圖像。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">不過算圖的速度也會下降。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">想要提高運算速度的話。就提高GPU Weights。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">相對地若是調太高。在算圖時VRAM不夠的話。就會進到共用記憶體。大幅的拉低運算速度。這邊就依照自己的設備進行調整吧。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">接著看到取樣方法這邊。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">使用原始設定的Euler 和simple(單一值)就好。或是和DPM++2M。跟SGM Uniform交互使用。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/Nrkh_E6iuwA_368.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">再往下看到提示詞相關性CFG這邊。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">因為Flux是蒸餾模型。事實上這類模型在訓練時。並不包含CFG這類相關指標。且不適用反向提示詞。所以在繪圖時也不建議開啟。畢竟沒有效果。又要花上雙倍的時間運算。取而代之的是Distilled CFG Scale。他僅僅是稍微的改變了色澤。和些許構圖。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/Nrkh_E6iuwA_402.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/Nrkh_E6iuwA&t=402" target="_blank"><strong># 結尾</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">儘管這類模型在訓練上的硬體要求很高。社群的大家還是迅速的。訓練出各種模型。在C站上也相當的熱鬧。是個非常有展望的模型。所以說。不要怕模型太大大家沒辦法用。只要敢放出來。社群的大家。就有辦法能讓模型在馬鈴薯上運作。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">那這次的抽獎。一樣在影片上架的同時。在Discord上舉辦。如果想知道現在。大家都是怎麼拿AI來工作的。千萬不要錯過喔。艾粒現在也在跟GPT學習Blender呢。那就這樣啦。掰。</p>

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=Nrkh_E6iuwA">https://www.youtube.com/watch?v=Nrkh_E6iuwA</a></p><p>本篇為Flux的使用教學，由於flux是一個非常巨大的模型導致許多設備無法使用，在貓神lllyasviel發起的NF4格式中成功的將模型進行了大幅度的壓縮，並且在6GVRAM的設備上也能運行，快來從forge上運行Flux模型體驗新世代模型的表現能力吧。</p><p>加入Discord: <a href="https://discord.gg/TM5d89YNwA">https://discord.gg/TM5d89YNwA</a></p><p>FB粉專: <a href="https://www.facebook.com/profile.php?id=100090228987264">https://www.facebook.com/profile.php?id=100090228987264</a> </p><p>成為這個頻道的會員並獲得福利： <a href="https://www.youtube.com/channel/UCine3_lVU-rFDRRI8xeImHA/join">https://www.youtube.com/channel/UCine3_lVU-rFDRRI8xeImHA/join</a> </p><p>抖內JackEllie(本功能沒有任何福利，但謝謝你的錢): <a href="https://www.buymeacoffee.com/otakuya202y">https://www.buymeacoffee.com/otakuya202y</a> =====================================================================</p><p></p><p>0:00片頭</p><p>0:17 簡介</p><p>1:18 抽書活動</p><p>1:57 安裝forge</p><p>2:59 Flux模型下載</p><p>3:56 Flux使用介紹</p><p>6:42 結尾</p><p>7:20 片尾</p><p></p><p>=====================================================================</p><p>Forge懶人包安裝文件:</p><p><a href="https://drive.google.com/file/d/1-2oxHAc8oJmkOhHw6O3XgtgeyMGZIKZC/view?usp=sharing">https://drive.google.com/file/d/1-2oxHAc8oJmkOhHw6O3XgtgeyMGZIKZC/view?usp=sharing</a></p><p></p><p>Flux模型載點</p><p>NF4格式:</p><p><a href="https://huggingface.co/lllyasviel/flux1-dev-bnb-nf4/resolve/main/flux1-dev-bnb-nf4-v2.safetensors">https://huggingface.co/lllyasviel/flux1-dev-bnb-nf4/resolve/main/flux1-dev-bnb-nf4-v2.safetensors</a></p><p></p><p>FP8格式:</p><p><a href="https://huggingface.co/lllyasviel/flux1_dev/resolve/main/flux1-dev-fp8.safetensors?download=true">https://huggingface.co/lllyasviel/flux1_dev/resolve/main/flux1-dev-fp8.safetensors?download=true</a></p><p></p><p>GGUF格式請上Discord看教學文章</p><p><a href="https://discord.com/channels/1077423770106597386/1273894421922058324">https://discord.com/channels/1077423770106597386/1273894421922058324</a></p><p></p><p>原文使用教學</p><p><a href="https://github.com/lllyasviel/stable-diffusion-webui-forge/discussions/981">https://github.com/lllyasviel/stable-diffusion-webui-forge/discussions/981</a></p><p></p><p>#stablediffusion #aidrawing #ai繪圖 #aiart #aigc #SD3 #flux #nf4 #fp8 #gguf</p>]]>
      </itunes:summary>
      <description>
        <![CDATA[<hr style="clear:both" />

<p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">敘述者開場，介紹了傑克與艾粒。他們提到近期關於 Stability AI 的爭議以及 SD3 模型發布後遇到的問題，導致公司內部人才流失。然而，這些離開的大佬們很快成立了「黑森林工作室」，並釋出了目前開源領域中最大的模型 Flux。他們讚揚了 Flux 的優秀性能，特別是在提示詞控制、建築結構和人物肢體方面的表現，認為它遠超之前的模型。<br /> 儘管 Flux 性能優異，但由於模型龐大，其 VRAM 需求很高。不過，敘述者接著宣布了好消息：在八月十一日，「貓神伊利維亞斯」發布了經過壓縮的 Flux 模型，並更新了 Forge 的版本。這一改動使得 Flux 現在可以在僅有 6GB VRAM 的設備上運作，因此他們決定製作這支影片來詳細介紹使用方法。在開始教學前，他們也提到這次影片將舉辦抽獎活動，贈送一本名為《超有料！職場第一實用的 AI 工作術》的書籍，並簡述了 AI 在處理職場日常問題上的應用。<br /> <h1>安裝 Forge 與 Flux 模型</h1><br /> 敘述者接著指導觀眾如何安裝 Forge。由於 Forge 曾停更一段時間導致部分功能異常，現在安裝流程已更新為「Reforge 懶人包」。觀眾需要前往影片下方的說明區下載此懶人包文件，其中包含了下載連結、已知未受影響的擴充列表以及共享模型的命令。如果對使用方法不清楚，可以參考他們先前的 Forge 教學影片。下載完成懶人包後，觀眾只需點選其中的 `update` 檔案進行更新，等待系統提示「請按任意鍵繼續」後即可關閉。未來啟動 Forge 只需點選 `run` 檔案。不過，由於啟動時會自動下載模型，建議先手動下載 Flux 模型並放置好後再執行 `run`。對於已安裝 Forge 的用戶，更新到最新版本後可能會發現部分擴充無法使用，需要先整理一下。<br /> 接下來是 Flux 模型的下載與存放。敘述者請觀眾從下方說明區下載經過壓縮的 Flux 模型。目前提供兩種格式：FP8 和 NF4。雖然作者建議 30、40 系列顯卡使用 NF4，其餘顯卡使用 FP8，但他們也見到有 10、20 系列顯卡成功使用 NF4 的案例。考量到 NF4 格式 VRAM 需求較低，且在低階顯卡上加速效果明顯，他們一律推薦觀眾優先嘗試 NF4，若無法使用再改用 FP8。下載的模型需要放置到指定的路徑。此外，敘述者提到還有一種 GGUF 格式，但使用較為複雜（需要額外下載文本編碼器和 VAE），有興趣的觀眾可以在他們的 Discord 群組中找到相關的使用文章。<br /> <h1>Flux 模型使用教學</h1><br /> Forge 更新到最新版本並將 Flux 模型放好後，敘述者開始介紹在 Forge 介面中如何使用 Flux。他們指出，介面最上方選擇模型權重存檔點（Checkpoint）的部分有所改動。現在只需選擇 UI 的類型，就能了解需要調整哪些參數。觀眾應選擇「Flux」，然後在「Diffusion with Low Bits」選項下選擇剛剛下載的模型。<br /> 敘述者詳細解釋了幾個重要的參數設定：<br /> 首先是「儲存格式」（Storage Format），這依照選擇的格式會顯著影響計算時間和些微的圖像變化。<br /> 再來是「Swap Method」，這是 RAM 與 VRAM 之間交換資料的方式。「Async」速度較快，但可能在使用中消耗過多 VRAM，導致進入共用記憶體而使運算速度大幅下降。「Queue」則是一種穩定的運算方式，讓每一層排隊逐個進行計算。敘述者在此推薦選擇「Queue」。如果遇到其他問題，建議查看下方說明區中，伊利維亞斯在 Github 上的除錯方法。<br /> 接著是「Swap Location」。由於模型龐大，在低 VRAM 硬體下不足以完全載入，需要 CPU 或共用記憶體協助。經過作者測試，在較新的硬體上，選擇「共用記憶體」比使用 CPU 快約 15%，但如果系統崩潰，則建議改回 CPU 交換。<br /> 最後是「GPU Weights (MB)」，這裡可以調整模型使用的 VRAM 空間。降低此值可以確保繪圖時有足夠的 VRAM 餘裕，讓低 VRAM 設備有機會生成更大尺寸的圖像，但算圖速度會下降。提高此值則能加快運算，但若設定太高導致 VRAM 不足，同樣會進入共用記憶體，大幅拉低速度。觀眾應根據自己的設備進行調整。<br /> 關於取樣方法（Sampler），敘述者建議使用原始設定的 Euler 和 simple (單一值)，或是和 DPM++2M 以及 SGM Uniform 交替使用。<br /> 接著提到「提示詞相關性 CFG」（CFG Scale）。由於 Flux 是經過蒸餾訓練的模型，訓練時不包含 CFG 這類指標，也不適用反向提示詞。因此在繪圖時不建議開啟 CFG，因為它沒有效果，反而會花費雙倍的運算時間。取而代之的是「Distilled CFG Scale」，它僅會稍微改變色澤和些許構圖。<br /> 敘述者總結道，儘管這類模型在訓練上的硬體要求很高，但社群的大家非常快速地訓練出了各種模型，在 C 站上也相當熱鬧，是個非常有前景的模型。這證明了社群的力量，無論模型多大，只要敢於開源，社群就有辦法讓模型在「馬鈴薯」（低階設備）上運作。<br /> 影片最後，敘述者再次提醒這次抽獎活動在影片上架的同時於 Discord 上舉辦，鼓勵大家參與以了解 AI 如何應用於實際工作中。他們提到艾粒目前也在使用 GPT 學習 Blender。最後，傑克與艾粒向觀眾道別。<hr />================================================</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><strong># 片頭</strong></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/Nrkh_E6iuwA_17.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/Nrkh_E6iuwA&t=17" target="_blank"><strong># 簡介</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">大家好我是杰克。大家好我是艾粒。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">相信前陣子。大家都有吃到Stablity AI的瓜。SD3大鍋一砸。不但社群不買單。公司內部的大佬們也紛紛離開。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">不過還好。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">他們很快的。成立了一間黑森林工作室。並釋出了第一個目前在開源世界中。最巨大的模型Flux。這個模型的性能非常優秀。提詞控制效果也很強。建築結構。人物肢體等等。都遠勝於之前的模型。既然他這麼優秀。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">為什麼我們之前沒有介紹呢。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">因為flux模型非常大。所以VRAM要求也就提高了。但!!貓神伊利維亞斯在8月11號時。發布了經過壓縮的flux。並更新了forge的版本。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">現在flux可以在6G VRAM上運作了。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">當然要來好好介紹一下使用方法啦。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/Nrkh_E6iuwA_78.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/Nrkh_E6iuwA&t=78" target="_blank"><strong># 抽書活動</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">喔。一樣在開始之前。我們來抽書吧。這次是這本。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">超有料！職場第一實用的 AI 工作術。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">用對工具讓生產力全面進化。看完這本書你再也不需要擔心。DPF檔原文Paper無法全文翻譯。會議記錄做起來費時又費力。E-mail和信息堆積了一大堆。這些都能靠AI解決。還能讓AI幫忙解釋法律用語。將數據可視化。還能在夜深人靜的時候。陪你喝心靈雞湯。AI現在已經無所不在。記得看到最後喔。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/Nrkh_E6iuwA_117.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/Nrkh_E6iuwA&t=117" target="_blank"><strong># 安裝forge</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">安裝。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">首先我們來安裝Forge吧。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">因為之前Forge停更了一段時間。導致許多功能都不能正常使用。所以Forge安裝篇的懶人包。已經變成Reforge懶人包了。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Forge懶人包就這篇的底下。那就開始安裝吧。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">到影片下方說明。找到懶人包下載文件。裡面有懶人包載點。跟目前已知沒有受影響的擴充。還有共享模型的命令。都在裡面自己看一下吧。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">如果不清楚怎麼用。可以參考之前的forge影片。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">下載完成後。跟我們介紹過的所有懶人包一樣。點選update更新。等系統出現請按任意鍵繼續的提示後關閉。未來要執行只需要點選run就好。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">不過因為啟動後會自動下載模型。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">所以我們先去下載flux模型。之後放好再點run。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">另外如果你本來就有安裝forge。更新到最新版本後。會發現有些擴充不能用了。記得先整理一下。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/Nrkh_E6iuwA_179.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/Nrkh_E6iuwA&t=179" target="_blank"><strong># Flux模型下載</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">模型下載與存放路徑。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">到下方說明下載經過壓縮的Flux模型。目前有兩種格式一種是FP8。另一個是NF4。雖然貓神表示如果你的顯卡是30、40系列。才能使用NF4格式。其餘的應該要下載FP8格式。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">但我們依然有看到10、20系列的顯卡。成功在NF4格式上使用的案例。再加上NF4格式VRAM需求較低。而且在比較低階的顯卡上。加速效果相當明顯。所以我們一律推薦各位使用NF4格式。真的不能使用再改用FP8格式。載好後放到以下路徑吧。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">對了。其實還有另一種GGUF格式。但因為需要另外下載文本編碼器跟VAE。使用起來比較麻煩。有興趣的可以到DC群中。看一下我寫的使用文章。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/Nrkh_E6iuwA_236.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/Nrkh_E6iuwA&t=236" target="_blank"><strong># Flux使用介紹</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">flux使用介紹。把Forge更新到最新版本後。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">會看到介面最上面一列。選擇模型權重存檔點的介面有改動。只要選擇UI的類型。就能知道有哪些參數需要調整。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">點選Flux。接著選擇剛剛下載的模型。Diffusion with Low Bits. 依照硬體和需求選擇儲存格式。依選擇的格式會有很大的時間差距。和些許的圖像變化。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Swap Method. 這是RAM與VRAM之間的交換方式。Asyne的速度較快。但有可能會在運作中使用過多的VRAM。從而進入共用記憶體。導致運算速度劇烈下滑。而Queue的運算方式。則是穩定的讓每一層排隊逐個進行計算。這邊我選Queue。若是還有遇到其他問題。建議到下方說明中。依利維亞斯的github上。看一下除錯方法。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/Nrkh_E6iuwA_300.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">再來是Swap Location。因為模型很大。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">在低vram硬體下。不足以承載模型。需要用到CPU或共用記憶體來幫忙。經過作者測試。在較新的硬體上。選擇共用記憶體交換。比使用CPU快上約百分之15。但若是系統崩潰。則建議選擇CPU交換。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">最後看到GPU Weights (MB)。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">這邊可以調整模型使用的VRAM空間。降低GPU Weights以確保繪製圖像時。有足夠的VRAM可以使用。讓低VRAM的設備。有機會挑戰更大張的圖像。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">不過算圖的速度也會下降。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">想要提高運算速度的話。就提高GPU Weights。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">相對地若是調太高。在算圖時VRAM不夠的話。就會進到共用記憶體。大幅的拉低運算速度。這邊就依照自己的設備進行調整吧。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">接著看到取樣方法這邊。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">使用原始設定的Euler 和simple(單一值)就好。或是和DPM++2M。跟SGM Uniform交互使用。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/Nrkh_E6iuwA_368.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">再往下看到提示詞相關性CFG這邊。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">因為Flux是蒸餾模型。事實上這類模型在訓練時。並不包含CFG這類相關指標。且不適用反向提示詞。所以在繪圖時也不建議開啟。畢竟沒有效果。又要花上雙倍的時間運算。取而代之的是Distilled CFG Scale。他僅僅是稍微的改變了色澤。和些許構圖。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/Nrkh_E6iuwA_402.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/Nrkh_E6iuwA&t=402" target="_blank"><strong># 結尾</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">儘管這類模型在訓練上的硬體要求很高。社群的大家還是迅速的。訓練出各種模型。在C站上也相當的熱鬧。是個非常有展望的模型。所以說。不要怕模型太大大家沒辦法用。只要敢放出來。社群的大家。就有辦法能讓模型在馬鈴薯上運作。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">那這次的抽獎。一樣在影片上架的同時。在Discord上舉辦。如果想知道現在。大家都是怎麼拿AI來工作的。千萬不要錯過喔。艾粒現在也在跟GPT學習Blender呢。那就這樣啦。掰。</p>

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=Nrkh_E6iuwA">https://www.youtube.com/watch?v=Nrkh_E6iuwA</a></p><p>本篇為Flux的使用教學，由於flux是一個非常巨大的模型導致許多設備無法使用，在貓神lllyasviel發起的NF4格式中成功的將模型進行了大幅度的壓縮，並且在6GVRAM的設備上也能運行，快來從forge上運行Flux模型體驗新世代模型的表現能力吧。</p><p>加入Discord: <a href="https://discord.gg/TM5d89YNwA">https://discord.gg/TM5d89YNwA</a></p><p>FB粉專: <a href="https://www.facebook.com/profile.php?id=100090228987264">https://www.facebook.com/profile.php?id=100090228987264</a> </p><p>成為這個頻道的會員並獲得福利： <a href="https://www.youtube.com/channel/UCine3_lVU-rFDRRI8xeImHA/join">https://www.youtube.com/channel/UCine3_lVU-rFDRRI8xeImHA/join</a> </p><p>抖內JackEllie(本功能沒有任何福利，但謝謝你的錢): <a href="https://www.buymeacoffee.com/otakuya202y">https://www.buymeacoffee.com/otakuya202y</a> =====================================================================</p><p></p><p>0:00片頭</p><p>0:17 簡介</p><p>1:18 抽書活動</p><p>1:57 安裝forge</p><p>2:59 Flux模型下載</p><p>3:56 Flux使用介紹</p><p>6:42 結尾</p><p>7:20 片尾</p><p></p><p>=====================================================================</p><p>Forge懶人包安裝文件:</p><p><a href="https://drive.google.com/file/d/1-2oxHAc8oJmkOhHw6O3XgtgeyMGZIKZC/view?usp=sharing">https://drive.google.com/file/d/1-2oxHAc8oJmkOhHw6O3XgtgeyMGZIKZC/view?usp=sharing</a></p><p></p><p>Flux模型載點</p><p>NF4格式:</p><p><a href="https://huggingface.co/lllyasviel/flux1-dev-bnb-nf4/resolve/main/flux1-dev-bnb-nf4-v2.safetensors">https://huggingface.co/lllyasviel/flux1-dev-bnb-nf4/resolve/main/flux1-dev-bnb-nf4-v2.safetensors</a></p><p></p><p>FP8格式:</p><p><a href="https://huggingface.co/lllyasviel/flux1_dev/resolve/main/flux1-dev-fp8.safetensors?download=true">https://huggingface.co/lllyasviel/flux1_dev/resolve/main/flux1-dev-fp8.safetensors?download=true</a></p><p></p><p>GGUF格式請上Discord看教學文章</p><p><a href="https://discord.com/channels/1077423770106597386/1273894421922058324">https://discord.com/channels/1077423770106597386/1273894421922058324</a></p><p></p><p>原文使用教學</p><p><a href="https://github.com/lllyasviel/stable-diffusion-webui-forge/discussions/981">https://github.com/lllyasviel/stable-diffusion-webui-forge/discussions/981</a></p><p></p><p>#stablediffusion #aidrawing #ai繪圖 #aiart #aigc #SD3 #flux #nf4 #fp8 #gguf</p>]]>
      </description>
      <content:encoded><![CDATA[<hr style="clear:both" />

<p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">敘述者開場，介紹了傑克與艾粒。他們提到近期關於 Stability AI 的爭議以及 SD3 模型發布後遇到的問題，導致公司內部人才流失。然而，這些離開的大佬們很快成立了「黑森林工作室」，並釋出了目前開源領域中最大的模型 Flux。他們讚揚了 Flux 的優秀性能，特別是在提示詞控制、建築結構和人物肢體方面的表現，認為它遠超之前的模型。<br /> 儘管 Flux 性能優異，但由於模型龐大，其 VRAM 需求很高。不過，敘述者接著宣布了好消息：在八月十一日，「貓神伊利維亞斯」發布了經過壓縮的 Flux 模型，並更新了 Forge 的版本。這一改動使得 Flux 現在可以在僅有 6GB VRAM 的設備上運作，因此他們決定製作這支影片來詳細介紹使用方法。在開始教學前，他們也提到這次影片將舉辦抽獎活動，贈送一本名為《超有料！職場第一實用的 AI 工作術》的書籍，並簡述了 AI 在處理職場日常問題上的應用。<br /> <h1>安裝 Forge 與 Flux 模型</h1><br /> 敘述者接著指導觀眾如何安裝 Forge。由於 Forge 曾停更一段時間導致部分功能異常，現在安裝流程已更新為「Reforge 懶人包」。觀眾需要前往影片下方的說明區下載此懶人包文件，其中包含了下載連結、已知未受影響的擴充列表以及共享模型的命令。如果對使用方法不清楚，可以參考他們先前的 Forge 教學影片。下載完成懶人包後，觀眾只需點選其中的 `update` 檔案進行更新，等待系統提示「請按任意鍵繼續」後即可關閉。未來啟動 Forge 只需點選 `run` 檔案。不過，由於啟動時會自動下載模型，建議先手動下載 Flux 模型並放置好後再執行 `run`。對於已安裝 Forge 的用戶，更新到最新版本後可能會發現部分擴充無法使用，需要先整理一下。<br /> 接下來是 Flux 模型的下載與存放。敘述者請觀眾從下方說明區下載經過壓縮的 Flux 模型。目前提供兩種格式：FP8 和 NF4。雖然作者建議 30、40 系列顯卡使用 NF4，其餘顯卡使用 FP8，但他們也見到有 10、20 系列顯卡成功使用 NF4 的案例。考量到 NF4 格式 VRAM 需求較低，且在低階顯卡上加速效果明顯，他們一律推薦觀眾優先嘗試 NF4，若無法使用再改用 FP8。下載的模型需要放置到指定的路徑。此外，敘述者提到還有一種 GGUF 格式，但使用較為複雜（需要額外下載文本編碼器和 VAE），有興趣的觀眾可以在他們的 Discord 群組中找到相關的使用文章。<br /> <h1>Flux 模型使用教學</h1><br /> Forge 更新到最新版本並將 Flux 模型放好後，敘述者開始介紹在 Forge 介面中如何使用 Flux。他們指出，介面最上方選擇模型權重存檔點（Checkpoint）的部分有所改動。現在只需選擇 UI 的類型，就能了解需要調整哪些參數。觀眾應選擇「Flux」，然後在「Diffusion with Low Bits」選項下選擇剛剛下載的模型。<br /> 敘述者詳細解釋了幾個重要的參數設定：<br /> 首先是「儲存格式」（Storage Format），這依照選擇的格式會顯著影響計算時間和些微的圖像變化。<br /> 再來是「Swap Method」，這是 RAM 與 VRAM 之間交換資料的方式。「Async」速度較快，但可能在使用中消耗過多 VRAM，導致進入共用記憶體而使運算速度大幅下降。「Queue」則是一種穩定的運算方式，讓每一層排隊逐個進行計算。敘述者在此推薦選擇「Queue」。如果遇到其他問題，建議查看下方說明區中，伊利維亞斯在 Github 上的除錯方法。<br /> 接著是「Swap Location」。由於模型龐大，在低 VRAM 硬體下不足以完全載入，需要 CPU 或共用記憶體協助。經過作者測試，在較新的硬體上，選擇「共用記憶體」比使用 CPU 快約 15%，但如果系統崩潰，則建議改回 CPU 交換。<br /> 最後是「GPU Weights (MB)」，這裡可以調整模型使用的 VRAM 空間。降低此值可以確保繪圖時有足夠的 VRAM 餘裕，讓低 VRAM 設備有機會生成更大尺寸的圖像，但算圖速度會下降。提高此值則能加快運算，但若設定太高導致 VRAM 不足，同樣會進入共用記憶體，大幅拉低速度。觀眾應根據自己的設備進行調整。<br /> 關於取樣方法（Sampler），敘述者建議使用原始設定的 Euler 和 simple (單一值)，或是和 DPM++2M 以及 SGM Uniform 交替使用。<br /> 接著提到「提示詞相關性 CFG」（CFG Scale）。由於 Flux 是經過蒸餾訓練的模型，訓練時不包含 CFG 這類指標，也不適用反向提示詞。因此在繪圖時不建議開啟 CFG，因為它沒有效果，反而會花費雙倍的運算時間。取而代之的是「Distilled CFG Scale」，它僅會稍微改變色澤和些許構圖。<br /> 敘述者總結道，儘管這類模型在訓練上的硬體要求很高，但社群的大家非常快速地訓練出了各種模型，在 C 站上也相當熱鬧，是個非常有前景的模型。這證明了社群的力量，無論模型多大，只要敢於開源，社群就有辦法讓模型在「馬鈴薯」（低階設備）上運作。<br /> 影片最後，敘述者再次提醒這次抽獎活動在影片上架的同時於 Discord 上舉辦，鼓勵大家參與以了解 AI 如何應用於實際工作中。他們提到艾粒目前也在使用 GPT 學習 Blender。最後，傑克與艾粒向觀眾道別。<hr />================================================</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><strong># 片頭</strong></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/Nrkh_E6iuwA_17.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/Nrkh_E6iuwA&t=17" target="_blank"><strong># 簡介</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">大家好我是杰克。大家好我是艾粒。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">相信前陣子。大家都有吃到Stablity AI的瓜。SD3大鍋一砸。不但社群不買單。公司內部的大佬們也紛紛離開。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">不過還好。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">他們很快的。成立了一間黑森林工作室。並釋出了第一個目前在開源世界中。最巨大的模型Flux。這個模型的性能非常優秀。提詞控制效果也很強。建築結構。人物肢體等等。都遠勝於之前的模型。既然他這麼優秀。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">為什麼我們之前沒有介紹呢。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">因為flux模型非常大。所以VRAM要求也就提高了。但!!貓神伊利維亞斯在8月11號時。發布了經過壓縮的flux。並更新了forge的版本。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">現在flux可以在6G VRAM上運作了。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">當然要來好好介紹一下使用方法啦。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/Nrkh_E6iuwA_78.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/Nrkh_E6iuwA&t=78" target="_blank"><strong># 抽書活動</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">喔。一樣在開始之前。我們來抽書吧。這次是這本。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">超有料！職場第一實用的 AI 工作術。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">用對工具讓生產力全面進化。看完這本書你再也不需要擔心。DPF檔原文Paper無法全文翻譯。會議記錄做起來費時又費力。E-mail和信息堆積了一大堆。這些都能靠AI解決。還能讓AI幫忙解釋法律用語。將數據可視化。還能在夜深人靜的時候。陪你喝心靈雞湯。AI現在已經無所不在。記得看到最後喔。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/Nrkh_E6iuwA_117.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/Nrkh_E6iuwA&t=117" target="_blank"><strong># 安裝forge</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">安裝。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">首先我們來安裝Forge吧。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">因為之前Forge停更了一段時間。導致許多功能都不能正常使用。所以Forge安裝篇的懶人包。已經變成Reforge懶人包了。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Forge懶人包就這篇的底下。那就開始安裝吧。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">到影片下方說明。找到懶人包下載文件。裡面有懶人包載點。跟目前已知沒有受影響的擴充。還有共享模型的命令。都在裡面自己看一下吧。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">如果不清楚怎麼用。可以參考之前的forge影片。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">下載完成後。跟我們介紹過的所有懶人包一樣。點選update更新。等系統出現請按任意鍵繼續的提示後關閉。未來要執行只需要點選run就好。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">不過因為啟動後會自動下載模型。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">所以我們先去下載flux模型。之後放好再點run。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">另外如果你本來就有安裝forge。更新到最新版本後。會發現有些擴充不能用了。記得先整理一下。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/Nrkh_E6iuwA_179.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/Nrkh_E6iuwA&t=179" target="_blank"><strong># Flux模型下載</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">模型下載與存放路徑。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">到下方說明下載經過壓縮的Flux模型。目前有兩種格式一種是FP8。另一個是NF4。雖然貓神表示如果你的顯卡是30、40系列。才能使用NF4格式。其餘的應該要下載FP8格式。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">但我們依然有看到10、20系列的顯卡。成功在NF4格式上使用的案例。再加上NF4格式VRAM需求較低。而且在比較低階的顯卡上。加速效果相當明顯。所以我們一律推薦各位使用NF4格式。真的不能使用再改用FP8格式。載好後放到以下路徑吧。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">對了。其實還有另一種GGUF格式。但因為需要另外下載文本編碼器跟VAE。使用起來比較麻煩。有興趣的可以到DC群中。看一下我寫的使用文章。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/Nrkh_E6iuwA_236.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/Nrkh_E6iuwA&t=236" target="_blank"><strong># Flux使用介紹</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">flux使用介紹。把Forge更新到最新版本後。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">會看到介面最上面一列。選擇模型權重存檔點的介面有改動。只要選擇UI的類型。就能知道有哪些參數需要調整。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">點選Flux。接著選擇剛剛下載的模型。Diffusion with Low Bits. 依照硬體和需求選擇儲存格式。依選擇的格式會有很大的時間差距。和些許的圖像變化。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">Swap Method. 這是RAM與VRAM之間的交換方式。Asyne的速度較快。但有可能會在運作中使用過多的VRAM。從而進入共用記憶體。導致運算速度劇烈下滑。而Queue的運算方式。則是穩定的讓每一層排隊逐個進行計算。這邊我選Queue。若是還有遇到其他問題。建議到下方說明中。依利維亞斯的github上。看一下除錯方法。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/Nrkh_E6iuwA_300.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">再來是Swap Location。因為模型很大。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">在低vram硬體下。不足以承載模型。需要用到CPU或共用記憶體來幫忙。經過作者測試。在較新的硬體上。選擇共用記憶體交換。比使用CPU快上約百分之15。但若是系統崩潰。則建議選擇CPU交換。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">最後看到GPU Weights (MB)。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">這邊可以調整模型使用的VRAM空間。降低GPU Weights以確保繪製圖像時。有足夠的VRAM可以使用。讓低VRAM的設備。有機會挑戰更大張的圖像。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">不過算圖的速度也會下降。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">想要提高運算速度的話。就提高GPU Weights。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">相對地若是調太高。在算圖時VRAM不夠的話。就會進到共用記憶體。大幅的拉低運算速度。這邊就依照自己的設備進行調整吧。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">接著看到取樣方法這邊。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">使用原始設定的Euler 和simple(單一值)就好。或是和DPM++2M。跟SGM Uniform交互使用。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/Nrkh_E6iuwA_368.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">再往下看到提示詞相關性CFG這邊。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">因為Flux是蒸餾模型。事實上這類模型在訓練時。並不包含CFG這類相關指標。且不適用反向提示詞。所以在繪圖時也不建議開啟。畢竟沒有效果。又要花上雙倍的時間運算。取而代之的是Distilled CFG Scale。他僅僅是稍微的改變了色澤。和些許構圖。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Other-202504/file-cache/Nrkh_E6iuwA_402.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><a href="https://youtu.be/Nrkh_E6iuwA&t=402" target="_blank"><strong># 結尾</strong></a></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">儘管這類模型在訓練上的硬體要求很高。社群的大家還是迅速的。訓練出各種模型。在C站上也相當的熱鬧。是個非常有展望的模型。所以說。不要怕模型太大大家沒辦法用。只要敢放出來。社群的大家。就有辦法能讓模型在馬鈴薯上運作。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">那這次的抽獎。一樣在影片上架的同時。在Discord上舉辦。如果想知道現在。大家都是怎麼拿AI來工作的。千萬不要錯過喔。艾粒現在也在跟GPT學習Blender呢。那就這樣啦。掰。</p>

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=Nrkh_E6iuwA">https://www.youtube.com/watch?v=Nrkh_E6iuwA</a></p><p>本篇為Flux的使用教學，由於flux是一個非常巨大的模型導致許多設備無法使用，在貓神lllyasviel發起的NF4格式中成功的將模型進行了大幅度的壓縮，並且在6GVRAM的設備上也能運行，快來從forge上運行Flux模型體驗新世代模型的表現能力吧。</p><p>加入Discord: <a href="https://discord.gg/TM5d89YNwA">https://discord.gg/TM5d89YNwA</a></p><p>FB粉專: <a href="https://www.facebook.com/profile.php?id=100090228987264">https://www.facebook.com/profile.php?id=100090228987264</a> </p><p>成為這個頻道的會員並獲得福利： <a href="https://www.youtube.com/channel/UCine3_lVU-rFDRRI8xeImHA/join">https://www.youtube.com/channel/UCine3_lVU-rFDRRI8xeImHA/join</a> </p><p>抖內JackEllie(本功能沒有任何福利，但謝謝你的錢): <a href="https://www.buymeacoffee.com/otakuya202y">https://www.buymeacoffee.com/otakuya202y</a> =====================================================================</p><p></p><p>0:00片頭</p><p>0:17 簡介</p><p>1:18 抽書活動</p><p>1:57 安裝forge</p><p>2:59 Flux模型下載</p><p>3:56 Flux使用介紹</p><p>6:42 結尾</p><p>7:20 片尾</p><p></p><p>=====================================================================</p><p>Forge懶人包安裝文件:</p><p><a href="https://drive.google.com/file/d/1-2oxHAc8oJmkOhHw6O3XgtgeyMGZIKZC/view?usp=sharing">https://drive.google.com/file/d/1-2oxHAc8oJmkOhHw6O3XgtgeyMGZIKZC/view?usp=sharing</a></p><p></p><p>Flux模型載點</p><p>NF4格式:</p><p><a href="https://huggingface.co/lllyasviel/flux1-dev-bnb-nf4/resolve/main/flux1-dev-bnb-nf4-v2.safetensors">https://huggingface.co/lllyasviel/flux1-dev-bnb-nf4/resolve/main/flux1-dev-bnb-nf4-v2.safetensors</a></p><p></p><p>FP8格式:</p><p><a href="https://huggingface.co/lllyasviel/flux1_dev/resolve/main/flux1-dev-fp8.safetensors?download=true">https://huggingface.co/lllyasviel/flux1_dev/resolve/main/flux1-dev-fp8.safetensors?download=true</a></p><p></p><p>GGUF格式請上Discord看教學文章</p><p><a href="https://discord.com/channels/1077423770106597386/1273894421922058324">https://discord.com/channels/1077423770106597386/1273894421922058324</a></p><p></p><p>原文使用教學</p><p><a href="https://github.com/lllyasviel/stable-diffusion-webui-forge/discussions/981">https://github.com/lllyasviel/stable-diffusion-webui-forge/discussions/981</a></p><p></p><p>#stablediffusion #aidrawing #ai繪圖 #aiart #aigc #SD3 #flux #nf4 #fp8 #gguf</p>]]></content:encoded>
      <itunes:image href="https://i.ytimg.com/vi/Nrkh_E6iuwA/hqdefault.jpg"/>
      <pubDate>2024-08-19T11:00:21.000Z</pubDate>
    </item></channel>
</rss>